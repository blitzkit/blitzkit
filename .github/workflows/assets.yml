name: Assets

on:
  push:
    branches: main

  workflow_dispatch:
    inputs:
      cdn_branch:
        type: string
        required: false
        default: main
        description: What CDN branch to write to
      zip_url:
        type: string
        required: false
        description: ZIP URL to download instead of Steam client
      zip_root:
        type: string
        required: false
        description: Root dir of ZIP which houses the executable and Data dir

  schedule:
    - cron: "0 2 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.cdn_branch }}
  cancel-in-progress: true

env:
  DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  VIDEOS_SHEET: ${{ secrets.VIDEOS_SHEET }}
  GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
  WOTB_GLOSSARY: ${{ secrets.WOTB_GLOSSARY }}
  WOTB_DLC_CDN: ${{ secrets.WOTB_DLC_CDN }}
  PUBLIC_WARGAMING_APPLICATION_ID: ${{ secrets.PUBLIC_WARGAMING_APPLICATION_ID }}
  PUBLIC_ASSET_REPO: blitzkit/assets
  PUBLIC_ASSET_BRANCH: main
  WOTB_GLOSSARY_DOMAIN: ${{ secrets.WOTB_GLOSSARY_DOMAIN }}
  WOTB_GLOSSARY_PATH: ${{ secrets.WOTB_GLOSSARY_PATH }}
  PUBLIC_PROMOTE_OPENTEST: ${{ secrets.PUBLIC_PROMOTE_OPENTEST }}
  ALLOW_ROBOTS: true
  PUBLIC_GOOGLE_TAG_MANAGER_ID: ${{ secrets.PUBLIC_GOOGLE_TAG_MANAGER_ID }}
  PUBLIC_GOOGLE_ANALYTICS_PROPERTY_ID: ${{ secrets.PUBLIC_GOOGLE_ANALYTICS_PROPERTY_ID }}
  PUBLIC_PATREON_CLIENT_ID: ${{ secrets.PUBLIC_PATREON_CLIENT_ID }}
  PUBLIC_PATREON_REDIRECT_URI: ${{ secrets.PUBLIC_PATREON_REDIRECT_URI }}
  PATREON_CLIENT_SECRET: ${{ secrets.PATREON_CLIENT_SECRET }}
  PUBLIC_NITROPAY_ID: ${{ secrets.PUBLIC_NITROPAY_ID }}
  PUBLIC_DEBUG_MISSING_I18N: false
  PUBLIC_DISCORD_SERVER_ID: ${{ secrets.PUBLIC_DISCORD_SERVER_ID }}
  PUBLIC_ASSET_FAST_USER: blitzkit
  PUBLIC_ASSET_FAST_REPO: assets
  PUBLIC_ASSET_BASE: ${{ secrets.PUBLIC_ASSET_BASE }}

jobs:
  download_client:
    name: Download client
    runs-on: ubuntu-latest

    steps:
      - name: (ZIP) Maximize build space
        if: github.event.inputs.zip_url != ''
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}

      - uses: arduino/setup-protoc@v3

      - name: (Steam) Setup bun
        uses: oven-sh/setup-bun@v1
        if: github.event.inputs.zip_url == ''

      - name: (Steam) Install dependencies
        if: github.event.inputs.zip_url == ''
        run: bun install

      - name: Build protos
        run: bun run build:protos

      - name: (Steam) Setup DepotDownloader
        if: github.event.inputs.zip_url == ''
        run: bun run setup:depotdownloader

      - name: (Steam) Download client
        if: github.event.inputs.zip_url == ''
        run: |
          chmod +x ./temp/depotDownloader/DepotDownloader
          ./temp/depotDownloader/DepotDownloader -q -os windows -app 444200 -username ${{ secrets.DEPOT_DOWNLOADER_USERNAME }} -password "${{ secrets.DEPOT_DOWNLOADER_PASSWORD }}"

      - name: (Steam) Apply patches
        if: github.event.inputs.zip_url == ''
        run: bun setup:patches --depot

      - name: (ZIP) Download client
        if: github.event.inputs.zip_url != ''
        env:
          ZIP_URL: ${{ github.event.inputs.zip_url }}
          ZIP_ROOT: ${{ github.event.inputs.zip_root }}
        run: |
          wget -q -O client.zip $ZIP_URL
          unzip -q client.zip -d client
          rm client.zip
          mkdir -p depots/444202/0
          mv client/$ZIP_ROOT/* depots/444202/0

      - name: Archive depots
        uses: actions/upload-artifact@v4
        with:
          name: depots
          path: depots

  build_assets:
    name: Build assets
    runs-on: ubuntu-latest
    needs: download_client

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Build protos
        run: bun run build:protos

      - name: Build proxy client
        run: bun run build:proxyclient

      - name: Download depots
        uses: actions/download-artifact@v4
        with:
          name: depots
          path: depots

      - name: AppArmor hack
        run: echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns

      - name: Start server and build assets
        run: |
          bun dev:website --verbosepa & 
          SERVER_PID=$!

          bun run build:assets --all-targets --depot --production

          kill $SERVER_PID || true
