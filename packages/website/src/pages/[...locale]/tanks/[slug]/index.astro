---
import { AstroSeo } from "@astrolib/seo";
import {
  assertSecret,
  asset,
  createDefaultProvisions,
  createDefaultSkills,
  fetchEquipmentDefinitions,
  fetchModelDefinitions,
  fetchProvisionDefinitions,
  fetchSkillDefinitions,
  fetchTankDefinitions,
  TIER_ROMAN_NUMERALS,
} from "@blitzkit/core";
import { unwrapper } from "@blitzkit/i18n";
import { literals } from "@blitzkit/i18n/src/literals";
import type { GetStaticPaths } from "astro";
import { load } from "cheerio";
import { tankCharacteristics } from "../../../../core/blitzkit/tankCharacteristics";
import { getStrings } from "../../../../core/i18n/getStrings";
import BaseLayout from "../../../../layouts/BaseLayout.astro";
import { genericDefaultEquipmentMatrix } from "../../../../stores/duel/constants";
import { getStaticPaths as parentGetStaticPaths } from "../index.astro";
import { Page } from "./_index";

export const getStaticPaths = (async () => {
  const tankDefinitions = await fetchTankDefinitions();
  const parentPaths = parentGetStaticPaths();

  return Object.values(tankDefinitions.tanks)
    .map((tank) =>
      parentPaths.map((parent) => ({
        params: { ...parent.params, slug: tank.slug },
        props: { ...parent.props, id: tank.id },
      }))
    )
    .flat();
}) satisfies GetStaticPaths;

const { id, locale } = Astro.props;
const strings = getStrings(locale);
const tankDefinitions = await fetchTankDefinitions();
const skillDefinitions = await fetchSkillDefinitions();
const provisionDefinitions = await fetchProvisionDefinitions();
const equipmentDefinitions = await fetchEquipmentDefinitions();
const tankModelDefinitions = await fetchModelDefinitions();

const tank = tankDefinitions.tanks[id];
const tankModelDefinition = tankModelDefinitions.models[tank.id];
const unwrap = unwrapper(locale);
const title = literals(strings.website.tools.tankopedia.tank_seo_title, {
  name: unwrap(tank.name),
  tier: TIER_ROMAN_NUMERALS[tank.tier],
  nationality:
    strings.common.nations_adjectives[
      tank.nation as keyof typeof strings.common.nations_adjectives
    ],
  class: strings.common.tank_class_short[tank.class],
  website: "BlitzKit",
});
const url = import.meta.env.SITE + Astro.url.pathname;

const icon = asset(`icons/tanks/big/${id}.webp`);
const turret = tank.turrets.at(-1)!;
const gun = turret.guns.at(-1)!;
const shell = gun.shells[0];
const characteristics = tankCharacteristics(
  {
    tank,
    applyDynamicArmor: false,
    applyReactiveArmor: false,
    applySpallLiner: false,
    camouflage: true,
    consumables: [],
    crewSkills: createDefaultSkills(skillDefinitions),
    engine: tank.engines.at(-1)!,
    equipmentMatrix: genericDefaultEquipmentMatrix,
    turret,
    gun,
    provisions: createDefaultProvisions(tank, gun, provisionDefinitions),
    shell,
    stockEngine: tank.engines[0],
    stockGun: tank.turrets[0].guns[0],
    stockTurret: tank.turrets[0],
    stockTrack: tank.tracks[0],
    track: tank.tracks.at(-1)!,
    assaultDistance: 0,
  },
  { equipmentDefinitions, provisionDefinitions, tankModelDefinition }
);
const description = literals(
  strings.website.tools.tankopedia.tank_seo_description,
  {
    name: unwrap(tank.name),
    dpm: Math.round(characteristics.dpm).toLocaleString(locale),
    alpha: Math.round(characteristics.damage).toLocaleString(locale),
    penetration: Math.round(characteristics.penetration).toLocaleString(locale),
    speed: Math.round(characteristics.speedForwards).toLocaleString(locale),
    health: Math.round(characteristics.health).toLocaleString(locale),
  }
);

export interface TankGuide {
  url: string;
  description?: string;
  image?: string;
}

const guideUrl = `${assertSecret(import.meta.env.PUBLIC_GUIDE_WEBSITE)}/${tank.slug}`;
let guide: TankGuide | undefined = undefined;
const guideResponse = await fetch(guideUrl);

if (guideResponse.ok) {
  const $ = await guideResponse.text().then(load);
  const description = $(".entry-content p").first().text();
  const image = $(".entry-content img").first().attr("src")?.toString();

  if (description !== undefined || image !== undefined) {
    guide = {
      url: guideUrl,
      description,
      image,
    };
  }
}
---

<AstroSeo
  {title}
  {description}
  openGraph={{ title, description, images: [{ url: icon }], url }}
/>

<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:card" content="summary" />
<meta name="twitter:image:src" content={icon} />

<BaseLayout {locale} integrated>
  <Page {locale} id={id} {guide} client:only="react">
    <Page {locale} id={id} {guide} skeleton slot="fallback" />
  </Page>
</BaseLayout>
