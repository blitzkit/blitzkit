---
import { Code, Flex, Heading, Separator } from '@radix-ui/themes';
import { PageWrapper } from '../../../components/PageWrapper';
import { apiTool } from '../../../constants/tools';
import ToolLayout from '../../../layouts/ToolLayout.astro';

export { getStaticPaths } from '../index.astro';

interface Tag {
  tag: string;
  discriminator?: string;
  description?: string;
}

const getDocsRegex = /\/\*\*\n(( \*(.+)?\n?)+)\n \*\/\nexport const GET/;
const multiLineCommentPrefixRegex = /^ \* ?/gm;
const tagRegex = /(@[^\s]+)(?:\s(.+))?/;
const firstWordRegex = /(\S+)(?:\s(.+))?/;
const ROOT = '/src/pages/api/';
const glob = import.meta.glob('/src/pages/api/**/*.ts', {
  eager: true,
  query: '?raw',
  import: 'default',
});
let apis: {
  path: string;
  content: string;
  comment: string;
  tags: Tag[];
}[] = [];

for (const rawPath in glob) {
  const content = (glob[rawPath] as string).replaceAll('\r', '');
  const regexExecution = content.match(getDocsRegex);
  const commentRaw = regexExecution?.[1];

  if (!commentRaw) continue;

  const commentWithTags = commentRaw.replaceAll(
    multiLineCommentPrefixRegex,
    '',
  );
  const path = rawPath.replace(ROOT, '').replace('.ts', '');
  let comment = '';

  const tags: Tag[] = [];
  commentWithTags.split('\n').forEach((line) => {
    const match = line.match(tagRegex);

    if (match) {
      const tag = match[1];
      const descriptionRaw = match[2];
      let discriminator: string | undefined;
      let description: string | undefined;

      if (tag === '@param') {
        const firstWordMatch = descriptionRaw.match(firstWordRegex)!;
        discriminator = firstWordMatch[1];
        description = firstWordMatch[2];
      } else {
        description = descriptionRaw;
      }

      tags.push({
        tag,
        discriminator,
        description,
      });
    } else {
      comment += line;
    }
  });

  comment = comment.trim();

  apis.push({ path, content, comment, tags });
}

apis.sort((a, b) => a.path.localeCompare(b.path));
---

<ToolLayout tool={apiTool}>
  <PageWrapper py="9">
    <Flex direction="column" gap="6">
      {
        apis.map((api, index) => (
          <>
            <Flex direction="column" gap="5">
              <Heading>
                <Code variant="ghost" color="iris" highContrast>
                  {api.path}
                </Code>
              </Heading>

              <Code
                color="gray"
                variant="ghost"
                highContrast
                style={{ whiteSpace: 'pre-wrap' }}
              >
                {api.comment}
              </Code>

              {api.tags.length > 0 && (
                <Flex direction="column" gap="2">
                  {api.tags.map(({ tag, description, discriminator }) => (
                    <Flex gap="2">
                      <Code color="iris" variant="solid">
                        {tag}
                      </Code>

                      {discriminator && (
                        <Code color="gray" variant="solid" highContrast>
                          {discriminator}
                        </Code>
                      )}

                      {description && (
                        <Code mt="calc(1em / 8)" color="gray" variant="ghost">
                          {description}
                        </Code>
                      )}
                    </Flex>
                  ))}
                </Flex>
              )}
            </Flex>

            {index < apis.length - 1 && (
              <Separator size="4" style={{ height: 0.5 }} />
            )}
          </>
        ))
      }
    </Flex>
  </PageWrapper>
</ToolLayout>
