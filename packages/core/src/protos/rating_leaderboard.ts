// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v5.28.2
// source: rating_leaderboard.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "blitzkit";

export interface RatingLeaderboard {
  version?: { $case: "v1"; value: RatingLeaderboardV1 } | { $case: "v2"; value: RatingLeaderboardV2 } | undefined;
}

export interface RatingLeaderboardV1 {
  entries: RatingLeaderboardEntryV1[];
}

export interface RatingLeaderboardEntryV1 {
  id: number;
  score: number;
}

export interface RatingLeaderboardV2 {
  entries: RatingLeaderboardEntryV2[];
}

export interface RatingLeaderboardEntryV2 {
  id: number;
  score: number;
  battles: number;
  wins: number;
  survived: number;
  damage: number;
  kills: number;
}

export function createBaseRatingLeaderboard(): RatingLeaderboard {
  return { version: undefined };
}

export const RatingLeaderboard: MessageFns<RatingLeaderboard> = {
  encode(message: RatingLeaderboard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.version?.$case) {
      case "v1":
        RatingLeaderboardV1.encode(message.version.value, writer.uint32(10).fork()).join();
        break;
      case "v2":
        RatingLeaderboardV2.encode(message.version.value, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RatingLeaderboard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRatingLeaderboard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = { $case: "v1", value: RatingLeaderboardV1.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = { $case: "v2", value: RatingLeaderboardV2.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RatingLeaderboard {
    return {
      version: isSet(object.v1)
        ? { $case: "v1", value: RatingLeaderboardV1.fromJSON(object.v1) }
        : isSet(object.v2)
        ? { $case: "v2", value: RatingLeaderboardV2.fromJSON(object.v2) }
        : undefined,
    };
  },

  toJSON(message: RatingLeaderboard): unknown {
    const obj: any = {};
    if (message.version?.$case === "v1") {
      obj.v1 = RatingLeaderboardV1.toJSON(message.version.value);
    }
    if (message.version?.$case === "v2") {
      obj.v2 = RatingLeaderboardV2.toJSON(message.version.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RatingLeaderboard>, I>>(base?: I): RatingLeaderboard {
    return RatingLeaderboard.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RatingLeaderboard>, I>>(object: I): RatingLeaderboard {
    const message = createBaseRatingLeaderboard();
    if (object.version?.$case === "v1" && object.version?.value !== undefined && object.version?.value !== null) {
      message.version = { $case: "v1", value: RatingLeaderboardV1.fromPartial(object.version.value) };
    }
    if (object.version?.$case === "v2" && object.version?.value !== undefined && object.version?.value !== null) {
      message.version = { $case: "v2", value: RatingLeaderboardV2.fromPartial(object.version.value) };
    }
    return message;
  },
};

export function createBaseRatingLeaderboardV1(): RatingLeaderboardV1 {
  return { entries: [] };
}

export const RatingLeaderboardV1: MessageFns<RatingLeaderboardV1> = {
  encode(message: RatingLeaderboardV1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      RatingLeaderboardEntryV1.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RatingLeaderboardV1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRatingLeaderboardV1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(RatingLeaderboardEntryV1.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RatingLeaderboardV1 {
    return {
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => RatingLeaderboardEntryV1.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RatingLeaderboardV1): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => RatingLeaderboardEntryV1.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RatingLeaderboardV1>, I>>(base?: I): RatingLeaderboardV1 {
    return RatingLeaderboardV1.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RatingLeaderboardV1>, I>>(object: I): RatingLeaderboardV1 {
    const message = createBaseRatingLeaderboardV1();
    message.entries = object.entries?.map((e) => RatingLeaderboardEntryV1.fromPartial(e)) || [];
    return message;
  },
};

export function createBaseRatingLeaderboardEntryV1(): RatingLeaderboardEntryV1 {
  return { id: 0, score: 0 };
}

export const RatingLeaderboardEntryV1: MessageFns<RatingLeaderboardEntryV1> = {
  encode(message: RatingLeaderboardEntryV1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.score !== 0) {
      writer.uint32(16).uint32(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RatingLeaderboardEntryV1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRatingLeaderboardEntryV1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RatingLeaderboardEntryV1 {
    return {
      id: globalThis.Number(assertSet("RatingLeaderboardEntryV1.id", object.id)),
      score: globalThis.Number(assertSet("RatingLeaderboardEntryV1.score", object.score)),
    };
  },

  toJSON(message: RatingLeaderboardEntryV1): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RatingLeaderboardEntryV1>, I>>(base?: I): RatingLeaderboardEntryV1 {
    return RatingLeaderboardEntryV1.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RatingLeaderboardEntryV1>, I>>(object: I): RatingLeaderboardEntryV1 {
    const message = createBaseRatingLeaderboardEntryV1();
    message.id = object.id ?? 0;
    message.score = object.score ?? 0;
    return message;
  },
};

export function createBaseRatingLeaderboardV2(): RatingLeaderboardV2 {
  return { entries: [] };
}

export const RatingLeaderboardV2: MessageFns<RatingLeaderboardV2> = {
  encode(message: RatingLeaderboardV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      RatingLeaderboardEntryV2.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RatingLeaderboardV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRatingLeaderboardV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(RatingLeaderboardEntryV2.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RatingLeaderboardV2 {
    return {
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => RatingLeaderboardEntryV2.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RatingLeaderboardV2): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => RatingLeaderboardEntryV2.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RatingLeaderboardV2>, I>>(base?: I): RatingLeaderboardV2 {
    return RatingLeaderboardV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RatingLeaderboardV2>, I>>(object: I): RatingLeaderboardV2 {
    const message = createBaseRatingLeaderboardV2();
    message.entries = object.entries?.map((e) => RatingLeaderboardEntryV2.fromPartial(e)) || [];
    return message;
  },
};

export function createBaseRatingLeaderboardEntryV2(): RatingLeaderboardEntryV2 {
  return { id: 0, score: 0, battles: 0, wins: 0, survived: 0, damage: 0, kills: 0 };
}

export const RatingLeaderboardEntryV2: MessageFns<RatingLeaderboardEntryV2> = {
  encode(message: RatingLeaderboardEntryV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.score !== 0) {
      writer.uint32(16).uint32(message.score);
    }
    if (message.battles !== 0) {
      writer.uint32(24).uint32(message.battles);
    }
    if (message.wins !== 0) {
      writer.uint32(32).uint32(message.wins);
    }
    if (message.survived !== 0) {
      writer.uint32(40).uint32(message.survived);
    }
    if (message.damage !== 0) {
      writer.uint32(48).uint32(message.damage);
    }
    if (message.kills !== 0) {
      writer.uint32(56).uint32(message.kills);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RatingLeaderboardEntryV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRatingLeaderboardEntryV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.battles = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.wins = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.survived = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.damage = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.kills = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RatingLeaderboardEntryV2 {
    return {
      id: globalThis.Number(assertSet("RatingLeaderboardEntryV2.id", object.id)),
      score: globalThis.Number(assertSet("RatingLeaderboardEntryV2.score", object.score)),
      battles: globalThis.Number(assertSet("RatingLeaderboardEntryV2.battles", object.battles)),
      wins: globalThis.Number(assertSet("RatingLeaderboardEntryV2.wins", object.wins)),
      survived: globalThis.Number(assertSet("RatingLeaderboardEntryV2.survived", object.survived)),
      damage: globalThis.Number(assertSet("RatingLeaderboardEntryV2.damage", object.damage)),
      kills: globalThis.Number(assertSet("RatingLeaderboardEntryV2.kills", object.kills)),
    };
  },

  toJSON(message: RatingLeaderboardEntryV2): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.battles !== 0) {
      obj.battles = Math.round(message.battles);
    }
    if (message.wins !== 0) {
      obj.wins = Math.round(message.wins);
    }
    if (message.survived !== 0) {
      obj.survived = Math.round(message.survived);
    }
    if (message.damage !== 0) {
      obj.damage = Math.round(message.damage);
    }
    if (message.kills !== 0) {
      obj.kills = Math.round(message.kills);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RatingLeaderboardEntryV2>, I>>(base?: I): RatingLeaderboardEntryV2 {
    return RatingLeaderboardEntryV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RatingLeaderboardEntryV2>, I>>(object: I): RatingLeaderboardEntryV2 {
    const message = createBaseRatingLeaderboardEntryV2();
    message.id = object.id ?? 0;
    message.score = object.score ?? 0;
    message.battles = object.battles ?? 0;
    message.wins = object.wins ?? 0;
    message.survived = object.survived ?? 0;
    message.damage = object.damage ?? 0;
    message.kills = object.kills ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

function assertSet<T>(field: string, value: T | undefined): T {
  if (!isSet(value)) {
    throw new TypeError(`Required field ${field} is not set`);
  }

  return value as T;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
