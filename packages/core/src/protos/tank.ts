// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v5.28.2
// source: packages/core/src/protos/tank.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { I18n } from "./i18n";

export const protobufPackage = "blitzkit";

export enum TankClass {
  LIGHT = 1,
  MEDIUM = 2,
  HEAVY = 3,
  TANK_DESTROYER = 4,
}

export function tankClassFromJSON(object: any): TankClass {
  switch (object) {
    case 1:
    case "LIGHT":
      return TankClass.LIGHT;
    case 2:
    case "MEDIUM":
      return TankClass.MEDIUM;
    case 3:
    case "HEAVY":
      return TankClass.HEAVY;
    case 4:
    case "TANK_DESTROYER":
      return TankClass.TANK_DESTROYER;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TankClass");
  }
}

export function tankClassToJSON(object: TankClass): string {
  switch (object) {
    case TankClass.LIGHT:
      return "LIGHT";
    case TankClass.MEDIUM:
      return "MEDIUM";
    case TankClass.HEAVY:
      return "HEAVY";
    case TankClass.TANK_DESTROYER:
      return "TANK_DESTROYER";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TankClass");
  }
}

export enum TankType {
  RESEARCHABLE = 1,
  PREMIUM = 2,
  COLLECTOR = 3,
}

export function tankTypeFromJSON(object: any): TankType {
  switch (object) {
    case 1:
    case "RESEARCHABLE":
      return TankType.RESEARCHABLE;
    case 2:
    case "PREMIUM":
      return TankType.PREMIUM;
    case 3:
    case "COLLECTOR":
      return TankType.COLLECTOR;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TankType");
  }
}

export function tankTypeToJSON(object: TankType): string {
  switch (object) {
    case TankType.RESEARCHABLE:
      return "RESEARCHABLE";
    case TankType.PREMIUM:
      return "PREMIUM";
    case TankType.COLLECTOR:
      return "COLLECTOR";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TankType");
  }
}

export enum ShellType {
  AP = 1,
  APCR = 2,
  HEAT = 3,
  HE = 4,
}

export function shellTypeFromJSON(object: any): ShellType {
  switch (object) {
    case 1:
    case "AP":
      return ShellType.AP;
    case 2:
    case "APCR":
      return ShellType.APCR;
    case 3:
    case "HEAT":
      return ShellType.HEAT;
    case 4:
    case "HE":
      return ShellType.HE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ShellType");
  }
}

export function shellTypeToJSON(object: ShellType): string {
  switch (object) {
    case ShellType.AP:
      return "AP";
    case ShellType.APCR:
      return "APCR";
    case ShellType.HEAT:
      return "HEAT";
    case ShellType.HE:
      return "HE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ShellType");
  }
}

export enum CrewType {
  COMMANDER = 1,
  DRIVER = 2,
  GUNNER = 3,
  LOADER = 4,
  RADIOMAN = 5,
}

export function crewTypeFromJSON(object: any): CrewType {
  switch (object) {
    case 1:
    case "COMMANDER":
      return CrewType.COMMANDER;
    case 2:
    case "DRIVER":
      return CrewType.DRIVER;
    case 3:
    case "GUNNER":
      return CrewType.GUNNER;
    case 4:
    case "LOADER":
      return CrewType.LOADER;
    case 5:
    case "RADIOMAN":
      return CrewType.RADIOMAN;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CrewType");
  }
}

export function crewTypeToJSON(object: CrewType): string {
  switch (object) {
    case CrewType.COMMANDER:
      return "COMMANDER";
    case CrewType.DRIVER:
      return "DRIVER";
    case CrewType.GUNNER:
      return "GUNNER";
    case CrewType.LOADER:
      return "LOADER";
    case CrewType.RADIOMAN:
      return "RADIOMAN";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CrewType");
  }
}

export interface Tank {
  id: string;
  name: I18n;
  class: TankClass;
  type: TankType;
}

function createBaseTank(): Tank {
  return { id: "", name: createBaseI18n(), class: 1, type: 1 };
}

export const Tank: MessageFns<Tank> = {
  encode(message: Tank, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      I18n.encode(message.name, writer.uint32(18).fork()).join();
    }
    if (message.class !== 1) {
      writer.uint32(24).int32(message.class);
    }
    if (message.type !== 1) {
      writer.uint32(32).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tank {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTank();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = I18n.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.class = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tank {
    return {
      id: globalThis.String(assertSet("Tank.id", object.id)),
      name: I18n.fromJSON(assertSet("Tank.name", object.name)),
      class: tankClassFromJSON(assertSet("Tank.class", object.class)),
      type: tankTypeFromJSON(assertSet("Tank.type", object.type)),
    };
  },

  toJSON(message: Tank): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== undefined) {
      obj.name = I18n.toJSON(message.name);
    }
    if (message.class !== 1) {
      obj.class = tankClassToJSON(message.class);
    }
    if (message.type !== 1) {
      obj.type = tankTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Tank>, I>>(base?: I): Tank {
    return Tank.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Tank>, I>>(object: I): Tank {
    const message = createBaseTank();
    message.id = object.id ?? "";
    message.name = (object.name !== undefined && object.name !== null)
      ? I18n.fromPartial(object.name)
      : createBaseI18n();
    message.class = object.class ?? 1;
    message.type = object.type ?? 1;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

function assertSet<T>(field: string, value: T | undefined): T {
  if (!isSet(value)) {
    throw new TypeError(`Required field ${field} is not set`);
  }

  return value as T;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
