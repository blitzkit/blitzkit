// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v5.28.2
// source: packages/core/src/protos/legacy_game_definitions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import { I18nString, createBaseI18nString } from './legacy_i18n';

export const protobufPackage = 'blitzkit';

export interface GameDefinitions {
  version: string;
  nations: string[];
  gameModes: { [key: number]: GameMode };
  roles: { [key: number]: GameModeRole };
}

export interface GameDefinitions_GameModesEntry {
  key: number;
  value: GameMode | undefined;
}

export interface GameDefinitions_RolesEntry {
  key: number;
  value: GameModeRole | undefined;
}

export interface GameMode {
  name: I18nString;
}

export interface GameModeRole {
  provisions: number[];
  consumables: number[];
}

function createBaseGameDefinitions(): GameDefinitions {
  return { version: '', nations: [], gameModes: {}, roles: {} };
}

export const GameDefinitions: MessageFns<GameDefinitions> = {
  encode(
    message: GameDefinitions,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.version !== '') {
      writer.uint32(10).string(message.version);
    }
    for (const v of message.nations) {
      writer.uint32(18).string(v!);
    }
    Object.entries(message.gameModes).forEach(([key, value]) => {
      GameDefinitions_GameModesEntry.encode(
        { key: key as any, value },
        writer.uint32(26).fork(),
      ).join();
    });
    Object.entries(message.roles).forEach(([key, value]) => {
      GameDefinitions_RolesEntry.encode(
        { key: key as any, value },
        writer.uint32(34).fork(),
      ).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameDefinitions {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameDefinitions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nations.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = GameDefinitions_GameModesEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry3.value !== undefined) {
            message.gameModes[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = GameDefinitions_RolesEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry4.value !== undefined) {
            message.roles[entry4.key] = entry4.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameDefinitions {
    return {
      version: globalThis.String(
        assertSet('GameDefinitions.version', object.version),
      ),
      nations: globalThis.Array.isArray(object?.nations)
        ? object.nations.map((e: any) => globalThis.String(e))
        : [],
      gameModes: isObject(object.gameModes)
        ? Object.entries(object.gameModes).reduce<{ [key: number]: GameMode }>(
            (acc, [key, value]) => {
              acc[globalThis.Number(key)] = GameMode.fromJSON(value);
              return acc;
            },
            {},
          )
        : {},
      roles: isObject(object.roles)
        ? Object.entries(object.roles).reduce<{ [key: number]: GameModeRole }>(
            (acc, [key, value]) => {
              acc[globalThis.Number(key)] = GameModeRole.fromJSON(value);
              return acc;
            },
            {},
          )
        : {},
    };
  },

  toJSON(message: GameDefinitions): unknown {
    const obj: any = {};
    if (message.version !== '') {
      obj.version = message.version;
    }
    if (message.nations?.length) {
      obj.nations = message.nations;
    }
    if (message.gameModes) {
      const entries = Object.entries(message.gameModes);
      if (entries.length > 0) {
        obj.gameModes = {};
        entries.forEach(([k, v]) => {
          obj.gameModes[k] = GameMode.toJSON(v);
        });
      }
    }
    if (message.roles) {
      const entries = Object.entries(message.roles);
      if (entries.length > 0) {
        obj.roles = {};
        entries.forEach(([k, v]) => {
          obj.roles[k] = GameModeRole.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameDefinitions>, I>>(
    base?: I,
  ): GameDefinitions {
    return GameDefinitions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameDefinitions>, I>>(
    object: I,
  ): GameDefinitions {
    const message = createBaseGameDefinitions();
    message.version = object.version ?? '';
    message.nations = object.nations?.map((e) => e) || [];
    message.gameModes = Object.entries(object.gameModes ?? {}).reduce<{
      [key: number]: GameMode;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = GameMode.fromPartial(value);
      }
      return acc;
    }, {});
    message.roles = Object.entries(object.roles ?? {}).reduce<{
      [key: number]: GameModeRole;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = GameModeRole.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseGameDefinitions_GameModesEntry(): GameDefinitions_GameModesEntry {
  return { key: 0, value: createBaseGameMode() };
}

export const GameDefinitions_GameModesEntry: MessageFns<GameDefinitions_GameModesEntry> =
  {
    encode(
      message: GameDefinitions_GameModesEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== undefined) {
        writer.uint32(8).uint32(message.key);
      }
      if (message.value !== undefined) {
        GameMode.encode(message.value, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GameDefinitions_GameModesEntry {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGameDefinitions_GameModesEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.key = reader.uint32();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.value = GameMode.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): GameDefinitions_GameModesEntry {
      return {
        key: globalThis.Number(
          assertSet('GameDefinitions_GameModesEntry.key', object.key),
        ),
        value: GameMode.fromJSON(
          assertSet('GameDefinitions_GameModesEntry.value', object.value),
        ),
      };
    },

    toJSON(message: GameDefinitions_GameModesEntry): unknown {
      const obj: any = {};
      if (message.key !== undefined) {
        obj.key = Math.round(message.key);
      }
      if (message.value !== undefined) {
        obj.value = GameMode.toJSON(message.value);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<GameDefinitions_GameModesEntry>, I>>(
      base?: I,
    ): GameDefinitions_GameModesEntry {
      return GameDefinitions_GameModesEntry.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<GameDefinitions_GameModesEntry>, I>,
    >(object: I): GameDefinitions_GameModesEntry {
      const message = createBaseGameDefinitions_GameModesEntry();
      message.key = object.key ?? 0;
      message.value =
        object.value !== undefined && object.value !== null
          ? GameMode.fromPartial(object.value)
          : undefined;
      return message;
    },
  };

function createBaseGameDefinitions_RolesEntry(): GameDefinitions_RolesEntry {
  return { key: 0, value: createBaseGameModeRole() };
}

export const GameDefinitions_RolesEntry: MessageFns<GameDefinitions_RolesEntry> =
  {
    encode(
      message: GameDefinitions_RolesEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== undefined) {
        writer.uint32(8).uint32(message.key);
      }
      if (message.value !== undefined) {
        GameModeRole.encode(message.value, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GameDefinitions_RolesEntry {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGameDefinitions_RolesEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.key = reader.uint32();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.value = GameModeRole.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): GameDefinitions_RolesEntry {
      return {
        key: globalThis.Number(
          assertSet('GameDefinitions_RolesEntry.key', object.key),
        ),
        value: GameModeRole.fromJSON(
          assertSet('GameDefinitions_RolesEntry.value', object.value),
        ),
      };
    },

    toJSON(message: GameDefinitions_RolesEntry): unknown {
      const obj: any = {};
      if (message.key !== undefined) {
        obj.key = Math.round(message.key);
      }
      if (message.value !== undefined) {
        obj.value = GameModeRole.toJSON(message.value);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<GameDefinitions_RolesEntry>, I>>(
      base?: I,
    ): GameDefinitions_RolesEntry {
      return GameDefinitions_RolesEntry.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<GameDefinitions_RolesEntry>, I>>(
      object: I,
    ): GameDefinitions_RolesEntry {
      const message = createBaseGameDefinitions_RolesEntry();
      message.key = object.key ?? 0;
      message.value =
        object.value !== undefined && object.value !== null
          ? GameModeRole.fromPartial(object.value)
          : undefined;
      return message;
    },
  };

function createBaseGameMode(): GameMode {
  return { name: createBaseI18nString() };
}

export const GameMode: MessageFns<GameMode> = {
  encode(
    message: GameMode,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== undefined) {
      I18nString.encode(message.name, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameMode {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = I18nString.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameMode {
    return {
      name: I18nString.fromJSON(assertSet('GameMode.name', object.name)),
    };
  },

  toJSON(message: GameMode): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = I18nString.toJSON(message.name);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameMode>, I>>(base?: I): GameMode {
    return GameMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameMode>, I>>(object: I): GameMode {
    const message = createBaseGameMode();
    message.name =
      object.name !== undefined && object.name !== null
        ? I18nString.fromPartial(object.name)
        : createBaseI18nString();
    return message;
  },
};

function createBaseGameModeRole(): GameModeRole {
  return { provisions: [], consumables: [] };
}

export const GameModeRole: MessageFns<GameModeRole> = {
  encode(
    message: GameModeRole,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.provisions) {
      writer.uint32(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.consumables) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameModeRole {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameModeRole();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.provisions.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.provisions.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 16) {
            message.consumables.push(reader.uint32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.consumables.push(reader.uint32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameModeRole {
    return {
      provisions: globalThis.Array.isArray(object?.provisions)
        ? object.provisions.map((e: any) => globalThis.Number(e))
        : [],
      consumables: globalThis.Array.isArray(object?.consumables)
        ? object.consumables.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: GameModeRole): unknown {
    const obj: any = {};
    if (message.provisions?.length) {
      obj.provisions = message.provisions.map((e) => Math.round(e));
    }
    if (message.consumables?.length) {
      obj.consumables = message.consumables.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameModeRole>, I>>(
    base?: I,
  ): GameModeRole {
    return GameModeRole.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameModeRole>, I>>(
    object: I,
  ): GameModeRole {
    const message = createBaseGameModeRole();
    message.provisions = object.provisions?.map((e) => e) || [];
    message.consumables = object.consumables?.map((e) => e) || [];
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends { $case: string; value: unknown }
        ? { $case: T['$case']; value?: DeepPartial<T['value']> }
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isObject(value: any): boolean {
  return typeof value === 'object' && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

function assertSet<T>(field: string, value: T | undefined): T {
  if (!isSet(value)) {
    throw new TypeError(`Required field ${field} is not set`);
  }

  return value as T;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
