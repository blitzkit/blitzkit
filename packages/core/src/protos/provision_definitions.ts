// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v5.28.2
// source: packages/core/src/protos/provision_definitions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ConsumableTankFilter } from "./consumable_definitions";
import { I18nString, createBaseI18nString } from "./i18n";

export const protobufPackage = "blitzkit";

export interface ProvisionDefinitions {
  provisions: { [key: number]: Provision };
}

export interface ProvisionDefinitions_ProvisionsEntry {
  key: number;
  value: Provision | undefined;
}

export interface Provision {
  id: number;
  name: I18nString;
  crew?: number | undefined;
  game_mode_exclusive: boolean;
  include: ConsumableTankFilter[];
  exclude: ConsumableTankFilter[];
}

function createBaseProvisionDefinitions(): ProvisionDefinitions {
  return { provisions: {} };
}

export const ProvisionDefinitions: MessageFns<ProvisionDefinitions> = {
  encode(message: ProvisionDefinitions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.provisions).forEach(([key, value]) => {
      ProvisionDefinitions_ProvisionsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvisionDefinitions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvisionDefinitions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = ProvisionDefinitions_ProvisionsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.provisions[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvisionDefinitions {
    return {
      provisions: isObject(object.provisions)
        ? Object.entries(object.provisions).reduce<{ [key: number]: Provision }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Provision.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ProvisionDefinitions): unknown {
    const obj: any = {};
    if (message.provisions) {
      const entries = Object.entries(message.provisions);
      if (entries.length > 0) {
        obj.provisions = {};
        entries.forEach(([k, v]) => {
          obj.provisions[k] = Provision.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProvisionDefinitions>, I>>(base?: I): ProvisionDefinitions {
    return ProvisionDefinitions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProvisionDefinitions>, I>>(object: I): ProvisionDefinitions {
    const message = createBaseProvisionDefinitions();
    message.provisions = Object.entries(object.provisions ?? {}).reduce<{ [key: number]: Provision }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = Provision.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseProvisionDefinitions_ProvisionsEntry(): ProvisionDefinitions_ProvisionsEntry {
  return { key: 0, value: createBaseProvision() };
}

export const ProvisionDefinitions_ProvisionsEntry: MessageFns<ProvisionDefinitions_ProvisionsEntry> = {
  encode(message: ProvisionDefinitions_ProvisionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      Provision.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvisionDefinitions_ProvisionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvisionDefinitions_ProvisionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Provision.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvisionDefinitions_ProvisionsEntry {
    return {
      key: globalThis.Number(assertSet("ProvisionDefinitions_ProvisionsEntry.key", object.key)),
      value: Provision.fromJSON(assertSet("ProvisionDefinitions_ProvisionsEntry.value", object.value)),
    };
  },

  toJSON(message: ProvisionDefinitions_ProvisionsEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Provision.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProvisionDefinitions_ProvisionsEntry>, I>>(
    base?: I,
  ): ProvisionDefinitions_ProvisionsEntry {
    return ProvisionDefinitions_ProvisionsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProvisionDefinitions_ProvisionsEntry>, I>>(
    object: I,
  ): ProvisionDefinitions_ProvisionsEntry {
    const message = createBaseProvisionDefinitions_ProvisionsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? Provision.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseProvision(): Provision {
  return { id: 0, name: createBaseI18nString(), crew: undefined, game_mode_exclusive: false, include: [], exclude: [] };
}

export const Provision: MessageFns<Provision> = {
  encode(message: Provision, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.name !== undefined) {
      I18nString.encode(message.name, writer.uint32(18).fork()).join();
    }
    if (message.crew !== undefined && message.crew !== undefined) {
      writer.uint32(29).float(message.crew);
    }
    if (message.game_mode_exclusive !== false) {
      writer.uint32(40).bool(message.game_mode_exclusive);
    }
    for (const v of message.include) {
      ConsumableTankFilter.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.exclude) {
      ConsumableTankFilter.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Provision {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvision();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = I18nString.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.crew = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.game_mode_exclusive = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.include.push(ConsumableTankFilter.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.exclude.push(ConsumableTankFilter.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Provision {
    return {
      id: globalThis.Number(assertSet("Provision.id", object.id)),
      name: I18nString.fromJSON(assertSet("Provision.name", object.name)),
      crew: isSet(object.crew) ? globalThis.Number(object.crew) : undefined,
      game_mode_exclusive: globalThis.Boolean(assertSet("Provision.game_mode_exclusive", object.game_mode_exclusive)),
      include: globalThis.Array.isArray(object?.include)
        ? object.include.map((e: any) => ConsumableTankFilter.fromJSON(e))
        : [],
      exclude: globalThis.Array.isArray(object?.exclude)
        ? object.exclude.map((e: any) => ConsumableTankFilter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Provision): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined) {
      obj.name = I18nString.toJSON(message.name);
    }
    if (message.crew !== undefined && message.crew !== undefined) {
      obj.crew = message.crew;
    }
    if (message.game_mode_exclusive !== false) {
      obj.game_mode_exclusive = message.game_mode_exclusive;
    }
    if (message.include?.length) {
      obj.include = message.include.map((e) => ConsumableTankFilter.toJSON(e));
    }
    if (message.exclude?.length) {
      obj.exclude = message.exclude.map((e) => ConsumableTankFilter.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Provision>, I>>(base?: I): Provision {
    return Provision.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Provision>, I>>(object: I): Provision {
    const message = createBaseProvision();
    message.id = object.id ?? 0;
    message.name = (object.name !== undefined && object.name !== null)
      ? I18nString.fromPartial(object.name)
      : createBaseI18nString();
    message.crew = object.crew ?? undefined;
    message.game_mode_exclusive = object.game_mode_exclusive ?? false;
    message.include = object.include?.map((e) => ConsumableTankFilter.fromPartial(e)) || [];
    message.exclude = object.exclude?.map((e) => ConsumableTankFilter.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

function assertSet<T>(field: string, value: T | undefined): T {
  if (!isSet(value)) {
    throw new TypeError(`Required field ${field} is not set`);
  }

  return value as T;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
