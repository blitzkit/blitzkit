// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: packages/core/src/protos/tank.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Blitzkit {

  /// <summary>Holder for reflection information generated from packages/core/src/protos/tank.proto</summary>
  public static partial class TankReflection {

    #region Descriptor
    /// <summary>File descriptor for packages/core/src/protos/tank.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TankReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNwYWNrYWdlcy9jb3JlL3NyYy9wcm90b3MvdGFuay5wcm90bxIIYmxpdHpr",
            "aXQaI3BhY2thZ2VzL2NvcmUvc3JjL3Byb3Rvcy9pMThuLnByb3RvIr8ICgRU",
            "YW5rEgoKAmlkGAEgAigJEhwKBG5hbWUYAiACKAsyDi5ibGl0emtpdC5JMThu",
            "EgsKA3NldBgDIAIoCRINCgVjbGFzcxgEIAIoCRIPCgdmYWN0aW9uGAUgAigJ",
            "EjUKFXR1cnJldF9yb3RhdG9yX2hlYWx0aBgGIAIoCzIWLmJsaXR6a2l0Lk1v",
            "ZHVsZUhlYWx0aBI3ChdzdXJ2ZXlpbmdfZGV2aWNlX2hlYWx0aBgHIAIoCzIW",
            "LmJsaXR6a2l0Lk1vZHVsZUhlYWx0aBIqCgpndW5faGVhbHRoGAggAigLMhYu",
            "YmxpdHpraXQuTW9kdWxlSGVhbHRoEi4KDmNoYXNzaXNfaGVhbHRoGAkgAigL",
            "MhYuYmxpdHpraXQuTW9kdWxlSGVhbHRoEi8KD2FtbW9fYmF5X2hlYWx0aBgK",
            "IAIoCzIWLmJsaXR6a2l0Lk1vZHVsZUhlYWx0aBItCg1lbmdpbmVfaGVhbHRo",
            "GAsgAigLMhYuYmxpdHpraXQuTW9kdWxlSGVhbHRoEjAKEGZ1ZWxfdGFua19o",
            "ZWFsdGgYDCACKAsyFi5ibGl0emtpdC5Nb2R1bGVIZWFsdGgSKQoLY3Jld19o",
            "ZWFsdGgYDSADKAsyFC5ibGl0emtpdC5DcmV3SGVhbHRoEhIKCm1heF9oZWFs",
            "dGgYDiACKAISGwoTaGVhbHRoX2J1cm5fcGVyX3NlYxgPIAIoAhIcChRmaXJl",
            "X3N0YXJ0aW5nX2NoYW5jZRgQIAIoAhIeChZjb25jZWFsbWVudF9zdGF0aW9u",
            "YXJ5GBEgAigCEhoKEmNvbmNlYWxtZW50X21vdmluZxgSIAIoAhIiChpjb25j",
            "ZWFsbWVudF9mYWN0b3JfYXRfc2hvdBgTIAIoAhIYChB0dXJyZXRfdHVybl9y",
            "YXRlGBQgAigCEh4KFmNpcmN1bGFyX3Zpc2lvbl9yYWRpdXMYFSACKAISHwoG",
            "c2hlbGxzGBYgAygLMg8uYmxpdHpraXQuU2hlbGwSEwoLcmVsb2FkX3RpbWUY",
            "FyACKAISGAoQZGlzcGVyc2lvbl9hbmdsZRgYIAIoAhIeChZzaG90X2Rpc3Bl",
            "cnNpb25fZmFjdG9yGBkgAigCEikKIXR1cnJldF9yb3RhdGlvbl9kaXNwZXJz",
            "aW9uX2ZhY3RvchgaIAIoAhITCgthaW1pbmdfdGltZRgbIAIoAhIVCg1ndW5f",
            "dHVybl9yYXRlGBwgAigCEgwKBG1hc3MYHSACKAISFAoMZW5naW5lX3Bvd2Vy",
            "GB4gAigCEhkKEWZvcndhcmRfbWF4X3NwZWVkGB8gAigCEhoKEmJhY2t3YXJk",
            "X21heF9zcGVlZBggIAIoAhIWCg5yb3RhdGlvbl9zcGVlZBghIAIoAhIfChd0",
            "ZXJyYWluX3Jlc2lzdGFuY2VfaGFyZBgiIAIoAhITCgticmFrZV9mb3JjZRgj",
            "IAIoAiJCCgpDcmV3SGVhbHRoEiAKBHR5cGUYASACKA4yEi5ibGl0emtpdC5D",
            "cmV3VHlwZRISCgptYXhfaGVhbHRoGAIgAigCIrwCCgVTaGVsbBINCgVzcGVl",
            "ZBgBIAIoAhIPCgdncmF2aXR5GAIgAigCEhQKDGFybW9yX2RhbWFnZRgDIAIo",
            "AhIVCg1tb2R1bGVfZGFtYWdlGAQgAigCEg8KB2NhbGliZXIYBSACKAISFgoO",
            "cGllcmNpbmdfcG93ZXIYBiACKAISGwoTcGllcmNpbmdfcG93ZXJfNTAwbRgH",
            "IAIoAhIVCg1ub3JtYWxpemF0aW9uGAggAigCEhQKDG1heF9kaXN0YW5jZRgJ",
            "IAIoAhIWCg5yaWNvY2hldF9hbmdsZRgKIAIoAhIuCiZwaWVyY2luZ19wb3dl",
            "cl9sb3NzX2ZhY3Rvcl9ieV9kaXN0YW5jZRgLIAIoAhIYChBleHBsb3Npb25f",
            "cmFkaXVzGAwgAigCEhEKCW1heF9jb3VudBgNIAIoBSKSAQoMTW9kdWxlSGVh",
            "bHRoEhIKCm1heF9oZWFsdGgYASACKAISGAoQbWF4X3JlZ2VuX2hlYWx0aBgC",
            "IAIoAhIZChFoeXN0ZXJlc2lzX2hlYWx0aBgDIAEoAhIcChRoZWFsdGhfcmVn",
            "ZW5fcGVyX3NlYxgEIAIoAhIbChNoZWFsdGhfYnVybl9wZXJfc2VjGAUgASgC",
            "Kl0KCENyZXdUeXBlEg0KCUNPTU1BTkRFUhAAEgoKBkRSSVZFUhABEgwKCEdV",
            "Tk5FUl8xEAISDAoIR1VOTkVSXzIQAxIMCghMT0FERVJfMRAEEgwKCExPQURF",
            "Ul8yEAU="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Blitzkit.I18NReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Blitzkit.CrewType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Blitzkit.Tank), global::Blitzkit.Tank.Parser, new[]{ "Id", "Name", "Set", "Class", "Faction", "TurretRotatorHealth", "SurveyingDeviceHealth", "GunHealth", "ChassisHealth", "AmmoBayHealth", "EngineHealth", "FuelTankHealth", "CrewHealth", "MaxHealth", "HealthBurnPerSec", "FireStartingChance", "ConcealmentStationary", "ConcealmentMoving", "ConcealmentFactorAtShot", "TurretTurnRate", "CircularVisionRadius", "Shells", "ReloadTime", "DispersionAngle", "ShotDispersionFactor", "TurretRotationDispersionFactor", "AimingTime", "GunTurnRate", "Mass", "EnginePower", "ForwardMaxSpeed", "BackwardMaxSpeed", "RotationSpeed", "TerrainResistanceHard", "BrakeForce" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Blitzkit.CrewHealth), global::Blitzkit.CrewHealth.Parser, new[]{ "Type", "MaxHealth" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Blitzkit.Shell), global::Blitzkit.Shell.Parser, new[]{ "Speed", "Gravity", "ArmorDamage", "ModuleDamage", "Caliber", "PiercingPower", "PiercingPower500M", "Normalization", "MaxDistance", "RicochetAngle", "PiercingPowerLossFactorByDistance", "ExplosionRadius", "MaxCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Blitzkit.ModuleHealth), global::Blitzkit.ModuleHealth.Parser, new[]{ "MaxHealth", "MaxRegenHealth", "HysteresisHealth", "HealthRegenPerSec", "HealthBurnPerSec" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CrewType {
    [pbr::OriginalName("COMMANDER")] Commander = 0,
    [pbr::OriginalName("DRIVER")] Driver = 1,
    [pbr::OriginalName("GUNNER_1")] Gunner1 = 2,
    [pbr::OriginalName("GUNNER_2")] Gunner2 = 3,
    [pbr::OriginalName("LOADER_1")] Loader1 = 4,
    [pbr::OriginalName("LOADER_2")] Loader2 = 5,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Tank : pb::IMessage<Tank>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Tank> _parser = new pb::MessageParser<Tank>(() => new Tank());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Tank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blitzkit.TankReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Tank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Tank(Tank other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_ != null ? other.name_.Clone() : null;
      set_ = other.set_;
      class_ = other.class_;
      faction_ = other.faction_;
      turretRotatorHealth_ = other.turretRotatorHealth_ != null ? other.turretRotatorHealth_.Clone() : null;
      surveyingDeviceHealth_ = other.surveyingDeviceHealth_ != null ? other.surveyingDeviceHealth_.Clone() : null;
      gunHealth_ = other.gunHealth_ != null ? other.gunHealth_.Clone() : null;
      chassisHealth_ = other.chassisHealth_ != null ? other.chassisHealth_.Clone() : null;
      ammoBayHealth_ = other.ammoBayHealth_ != null ? other.ammoBayHealth_.Clone() : null;
      engineHealth_ = other.engineHealth_ != null ? other.engineHealth_.Clone() : null;
      fuelTankHealth_ = other.fuelTankHealth_ != null ? other.fuelTankHealth_.Clone() : null;
      crewHealth_ = other.crewHealth_.Clone();
      maxHealth_ = other.maxHealth_;
      healthBurnPerSec_ = other.healthBurnPerSec_;
      fireStartingChance_ = other.fireStartingChance_;
      concealmentStationary_ = other.concealmentStationary_;
      concealmentMoving_ = other.concealmentMoving_;
      concealmentFactorAtShot_ = other.concealmentFactorAtShot_;
      turretTurnRate_ = other.turretTurnRate_;
      circularVisionRadius_ = other.circularVisionRadius_;
      shells_ = other.shells_.Clone();
      reloadTime_ = other.reloadTime_;
      dispersionAngle_ = other.dispersionAngle_;
      shotDispersionFactor_ = other.shotDispersionFactor_;
      turretRotationDispersionFactor_ = other.turretRotationDispersionFactor_;
      aimingTime_ = other.aimingTime_;
      gunTurnRate_ = other.gunTurnRate_;
      mass_ = other.mass_;
      enginePower_ = other.enginePower_;
      forwardMaxSpeed_ = other.forwardMaxSpeed_;
      backwardMaxSpeed_ = other.backwardMaxSpeed_;
      rotationSpeed_ = other.rotationSpeed_;
      terrainResistanceHard_ = other.terrainResistanceHard_;
      brakeForce_ = other.brakeForce_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Tank Clone() {
      return new Tank(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private global::Blitzkit.I18n name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blitzkit.I18n Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 3;
    private readonly static string SetDefaultValue = "";

    private string set_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Set {
      get { return set_ ?? SetDefaultValue; }
      set {
        set_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "set" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSet {
      get { return set_ != null; }
    }
    /// <summary>Clears the value of the "set" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSet() {
      set_ = null;
    }

    /// <summary>Field number for the "class" field.</summary>
    public const int ClassFieldNumber = 4;
    private readonly static string ClassDefaultValue = "";

    private string class_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Class {
      get { return class_ ?? ClassDefaultValue; }
      set {
        class_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "class" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClass {
      get { return class_ != null; }
    }
    /// <summary>Clears the value of the "class" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClass() {
      class_ = null;
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 5;
    private readonly static string FactionDefaultValue = "";

    private string faction_;
    /// <summary>
    /// nations have been renamed to factions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Faction {
      get { return faction_ ?? FactionDefaultValue; }
      set {
        faction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "faction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFaction {
      get { return faction_ != null; }
    }
    /// <summary>Clears the value of the "faction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFaction() {
      faction_ = null;
    }

    /// <summary>Field number for the "turret_rotator_health" field.</summary>
    public const int TurretRotatorHealthFieldNumber = 6;
    private global::Blitzkit.ModuleHealth turretRotatorHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blitzkit.ModuleHealth TurretRotatorHealth {
      get { return turretRotatorHealth_; }
      set {
        turretRotatorHealth_ = value;
      }
    }

    /// <summary>Field number for the "surveying_device_health" field.</summary>
    public const int SurveyingDeviceHealthFieldNumber = 7;
    private global::Blitzkit.ModuleHealth surveyingDeviceHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blitzkit.ModuleHealth SurveyingDeviceHealth {
      get { return surveyingDeviceHealth_; }
      set {
        surveyingDeviceHealth_ = value;
      }
    }

    /// <summary>Field number for the "gun_health" field.</summary>
    public const int GunHealthFieldNumber = 8;
    private global::Blitzkit.ModuleHealth gunHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blitzkit.ModuleHealth GunHealth {
      get { return gunHealth_; }
      set {
        gunHealth_ = value;
      }
    }

    /// <summary>Field number for the "chassis_health" field.</summary>
    public const int ChassisHealthFieldNumber = 9;
    private global::Blitzkit.ModuleHealth chassisHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blitzkit.ModuleHealth ChassisHealth {
      get { return chassisHealth_; }
      set {
        chassisHealth_ = value;
      }
    }

    /// <summary>Field number for the "ammo_bay_health" field.</summary>
    public const int AmmoBayHealthFieldNumber = 10;
    private global::Blitzkit.ModuleHealth ammoBayHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blitzkit.ModuleHealth AmmoBayHealth {
      get { return ammoBayHealth_; }
      set {
        ammoBayHealth_ = value;
      }
    }

    /// <summary>Field number for the "engine_health" field.</summary>
    public const int EngineHealthFieldNumber = 11;
    private global::Blitzkit.ModuleHealth engineHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blitzkit.ModuleHealth EngineHealth {
      get { return engineHealth_; }
      set {
        engineHealth_ = value;
      }
    }

    /// <summary>Field number for the "fuel_tank_health" field.</summary>
    public const int FuelTankHealthFieldNumber = 12;
    private global::Blitzkit.ModuleHealth fuelTankHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blitzkit.ModuleHealth FuelTankHealth {
      get { return fuelTankHealth_; }
      set {
        fuelTankHealth_ = value;
      }
    }

    /// <summary>Field number for the "crew_health" field.</summary>
    public const int CrewHealthFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Blitzkit.CrewHealth> _repeated_crewHealth_codec
        = pb::FieldCodec.ForMessage(106, global::Blitzkit.CrewHealth.Parser);
    private readonly pbc::RepeatedField<global::Blitzkit.CrewHealth> crewHealth_ = new pbc::RepeatedField<global::Blitzkit.CrewHealth>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Blitzkit.CrewHealth> CrewHealth {
      get { return crewHealth_; }
    }

    /// <summary>Field number for the "max_health" field.</summary>
    public const int MaxHealthFieldNumber = 14;
    private readonly static float MaxHealthDefaultValue = 0F;

    private float maxHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxHealth {
      get { if ((_hasBits0 & 1) != 0) { return maxHealth_; } else { return MaxHealthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maxHealth_ = value;
      }
    }
    /// <summary>Gets whether the "max_health" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxHealth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "max_health" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxHealth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "health_burn_per_sec" field.</summary>
    public const int HealthBurnPerSecFieldNumber = 15;
    private readonly static float HealthBurnPerSecDefaultValue = 0F;

    private float healthBurnPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HealthBurnPerSec {
      get { if ((_hasBits0 & 2) != 0) { return healthBurnPerSec_; } else { return HealthBurnPerSecDefaultValue; } }
      set {
        _hasBits0 |= 2;
        healthBurnPerSec_ = value;
      }
    }
    /// <summary>Gets whether the "health_burn_per_sec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHealthBurnPerSec {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "health_burn_per_sec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHealthBurnPerSec() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "fire_starting_chance" field.</summary>
    public const int FireStartingChanceFieldNumber = 16;
    private readonly static float FireStartingChanceDefaultValue = 0F;

    private float fireStartingChance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FireStartingChance {
      get { if ((_hasBits0 & 4) != 0) { return fireStartingChance_; } else { return FireStartingChanceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fireStartingChance_ = value;
      }
    }
    /// <summary>Gets whether the "fire_starting_chance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFireStartingChance {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "fire_starting_chance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFireStartingChance() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "concealment_stationary" field.</summary>
    public const int ConcealmentStationaryFieldNumber = 17;
    private readonly static float ConcealmentStationaryDefaultValue = 0F;

    private float concealmentStationary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ConcealmentStationary {
      get { if ((_hasBits0 & 8) != 0) { return concealmentStationary_; } else { return ConcealmentStationaryDefaultValue; } }
      set {
        _hasBits0 |= 8;
        concealmentStationary_ = value;
      }
    }
    /// <summary>Gets whether the "concealment_stationary" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConcealmentStationary {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "concealment_stationary" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConcealmentStationary() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "concealment_moving" field.</summary>
    public const int ConcealmentMovingFieldNumber = 18;
    private readonly static float ConcealmentMovingDefaultValue = 0F;

    private float concealmentMoving_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ConcealmentMoving {
      get { if ((_hasBits0 & 16) != 0) { return concealmentMoving_; } else { return ConcealmentMovingDefaultValue; } }
      set {
        _hasBits0 |= 16;
        concealmentMoving_ = value;
      }
    }
    /// <summary>Gets whether the "concealment_moving" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConcealmentMoving {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "concealment_moving" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConcealmentMoving() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "concealment_factor_at_shot" field.</summary>
    public const int ConcealmentFactorAtShotFieldNumber = 19;
    private readonly static float ConcealmentFactorAtShotDefaultValue = 0F;

    private float concealmentFactorAtShot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ConcealmentFactorAtShot {
      get { if ((_hasBits0 & 32) != 0) { return concealmentFactorAtShot_; } else { return ConcealmentFactorAtShotDefaultValue; } }
      set {
        _hasBits0 |= 32;
        concealmentFactorAtShot_ = value;
      }
    }
    /// <summary>Gets whether the "concealment_factor_at_shot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConcealmentFactorAtShot {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "concealment_factor_at_shot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConcealmentFactorAtShot() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "turret_turn_rate" field.</summary>
    public const int TurretTurnRateFieldNumber = 20;
    private readonly static float TurretTurnRateDefaultValue = 0F;

    private float turretTurnRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TurretTurnRate {
      get { if ((_hasBits0 & 64) != 0) { return turretTurnRate_; } else { return TurretTurnRateDefaultValue; } }
      set {
        _hasBits0 |= 64;
        turretTurnRate_ = value;
      }
    }
    /// <summary>Gets whether the "turret_turn_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTurretTurnRate {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "turret_turn_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTurretTurnRate() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "circular_vision_radius" field.</summary>
    public const int CircularVisionRadiusFieldNumber = 21;
    private readonly static float CircularVisionRadiusDefaultValue = 0F;

    private float circularVisionRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CircularVisionRadius {
      get { if ((_hasBits0 & 128) != 0) { return circularVisionRadius_; } else { return CircularVisionRadiusDefaultValue; } }
      set {
        _hasBits0 |= 128;
        circularVisionRadius_ = value;
      }
    }
    /// <summary>Gets whether the "circular_vision_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCircularVisionRadius {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "circular_vision_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCircularVisionRadius() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "shells" field.</summary>
    public const int ShellsFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Blitzkit.Shell> _repeated_shells_codec
        = pb::FieldCodec.ForMessage(178, global::Blitzkit.Shell.Parser);
    private readonly pbc::RepeatedField<global::Blitzkit.Shell> shells_ = new pbc::RepeatedField<global::Blitzkit.Shell>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Blitzkit.Shell> Shells {
      get { return shells_; }
    }

    /// <summary>Field number for the "reload_time" field.</summary>
    public const int ReloadTimeFieldNumber = 23;
    private readonly static float ReloadTimeDefaultValue = 0F;

    private float reloadTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ReloadTime {
      get { if ((_hasBits0 & 256) != 0) { return reloadTime_; } else { return ReloadTimeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        reloadTime_ = value;
      }
    }
    /// <summary>Gets whether the "reload_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReloadTime {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "reload_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReloadTime() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "dispersion_angle" field.</summary>
    public const int DispersionAngleFieldNumber = 24;
    private readonly static float DispersionAngleDefaultValue = 0F;

    private float dispersionAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DispersionAngle {
      get { if ((_hasBits0 & 512) != 0) { return dispersionAngle_; } else { return DispersionAngleDefaultValue; } }
      set {
        _hasBits0 |= 512;
        dispersionAngle_ = value;
      }
    }
    /// <summary>Gets whether the "dispersion_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDispersionAngle {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "dispersion_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDispersionAngle() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "shot_dispersion_factor" field.</summary>
    public const int ShotDispersionFactorFieldNumber = 25;
    private readonly static float ShotDispersionFactorDefaultValue = 0F;

    private float shotDispersionFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ShotDispersionFactor {
      get { if ((_hasBits0 & 1024) != 0) { return shotDispersionFactor_; } else { return ShotDispersionFactorDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        shotDispersionFactor_ = value;
      }
    }
    /// <summary>Gets whether the "shot_dispersion_factor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShotDispersionFactor {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "shot_dispersion_factor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShotDispersionFactor() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "turret_rotation_dispersion_factor" field.</summary>
    public const int TurretRotationDispersionFactorFieldNumber = 26;
    private readonly static float TurretRotationDispersionFactorDefaultValue = 0F;

    private float turretRotationDispersionFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TurretRotationDispersionFactor {
      get { if ((_hasBits0 & 2048) != 0) { return turretRotationDispersionFactor_; } else { return TurretRotationDispersionFactorDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        turretRotationDispersionFactor_ = value;
      }
    }
    /// <summary>Gets whether the "turret_rotation_dispersion_factor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTurretRotationDispersionFactor {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "turret_rotation_dispersion_factor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTurretRotationDispersionFactor() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "aiming_time" field.</summary>
    public const int AimingTimeFieldNumber = 27;
    private readonly static float AimingTimeDefaultValue = 0F;

    private float aimingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AimingTime {
      get { if ((_hasBits0 & 4096) != 0) { return aimingTime_; } else { return AimingTimeDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        aimingTime_ = value;
      }
    }
    /// <summary>Gets whether the "aiming_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAimingTime {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "aiming_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAimingTime() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "gun_turn_rate" field.</summary>
    public const int GunTurnRateFieldNumber = 28;
    private readonly static float GunTurnRateDefaultValue = 0F;

    private float gunTurnRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GunTurnRate {
      get { if ((_hasBits0 & 8192) != 0) { return gunTurnRate_; } else { return GunTurnRateDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        gunTurnRate_ = value;
      }
    }
    /// <summary>Gets whether the "gun_turn_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGunTurnRate {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "gun_turn_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGunTurnRate() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 29;
    private readonly static float MassDefaultValue = 0F;

    private float mass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Mass {
      get { if ((_hasBits0 & 16384) != 0) { return mass_; } else { return MassDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        mass_ = value;
      }
    }
    /// <summary>Gets whether the "mass" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMass {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "mass" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMass() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "engine_power" field.</summary>
    public const int EnginePowerFieldNumber = 30;
    private readonly static float EnginePowerDefaultValue = 0F;

    private float enginePower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EnginePower {
      get { if ((_hasBits0 & 32768) != 0) { return enginePower_; } else { return EnginePowerDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        enginePower_ = value;
      }
    }
    /// <summary>Gets whether the "engine_power" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnginePower {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "engine_power" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnginePower() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "forward_max_speed" field.</summary>
    public const int ForwardMaxSpeedFieldNumber = 31;
    private readonly static float ForwardMaxSpeedDefaultValue = 0F;

    private float forwardMaxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ForwardMaxSpeed {
      get { if ((_hasBits0 & 65536) != 0) { return forwardMaxSpeed_; } else { return ForwardMaxSpeedDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        forwardMaxSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "forward_max_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForwardMaxSpeed {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "forward_max_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForwardMaxSpeed() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "backward_max_speed" field.</summary>
    public const int BackwardMaxSpeedFieldNumber = 32;
    private readonly static float BackwardMaxSpeedDefaultValue = 0F;

    private float backwardMaxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BackwardMaxSpeed {
      get { if ((_hasBits0 & 131072) != 0) { return backwardMaxSpeed_; } else { return BackwardMaxSpeedDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        backwardMaxSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "backward_max_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBackwardMaxSpeed {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "backward_max_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBackwardMaxSpeed() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "rotation_speed" field.</summary>
    public const int RotationSpeedFieldNumber = 33;
    private readonly static float RotationSpeedDefaultValue = 0F;

    private float rotationSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RotationSpeed {
      get { if ((_hasBits0 & 262144) != 0) { return rotationSpeed_; } else { return RotationSpeedDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        rotationSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "rotation_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRotationSpeed {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "rotation_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRotationSpeed() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "terrain_resistance_hard" field.</summary>
    public const int TerrainResistanceHardFieldNumber = 34;
    private readonly static float TerrainResistanceHardDefaultValue = 0F;

    private float terrainResistanceHard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TerrainResistanceHard {
      get { if ((_hasBits0 & 524288) != 0) { return terrainResistanceHard_; } else { return TerrainResistanceHardDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        terrainResistanceHard_ = value;
      }
    }
    /// <summary>Gets whether the "terrain_resistance_hard" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTerrainResistanceHard {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "terrain_resistance_hard" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTerrainResistanceHard() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "brake_force" field.</summary>
    public const int BrakeForceFieldNumber = 35;
    private readonly static float BrakeForceDefaultValue = 0F;

    private float brakeForce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BrakeForce {
      get { if ((_hasBits0 & 1048576) != 0) { return brakeForce_; } else { return BrakeForceDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        brakeForce_ = value;
      }
    }
    /// <summary>Gets whether the "brake_force" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBrakeForce {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "brake_force" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBrakeForce() {
      _hasBits0 &= ~1048576;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Tank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Tank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Name, other.Name)) return false;
      if (Set != other.Set) return false;
      if (Class != other.Class) return false;
      if (Faction != other.Faction) return false;
      if (!object.Equals(TurretRotatorHealth, other.TurretRotatorHealth)) return false;
      if (!object.Equals(SurveyingDeviceHealth, other.SurveyingDeviceHealth)) return false;
      if (!object.Equals(GunHealth, other.GunHealth)) return false;
      if (!object.Equals(ChassisHealth, other.ChassisHealth)) return false;
      if (!object.Equals(AmmoBayHealth, other.AmmoBayHealth)) return false;
      if (!object.Equals(EngineHealth, other.EngineHealth)) return false;
      if (!object.Equals(FuelTankHealth, other.FuelTankHealth)) return false;
      if(!crewHealth_.Equals(other.crewHealth_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxHealth, other.MaxHealth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HealthBurnPerSec, other.HealthBurnPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireStartingChance, other.FireStartingChance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConcealmentStationary, other.ConcealmentStationary)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConcealmentMoving, other.ConcealmentMoving)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConcealmentFactorAtShot, other.ConcealmentFactorAtShot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TurretTurnRate, other.TurretTurnRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CircularVisionRadius, other.CircularVisionRadius)) return false;
      if(!shells_.Equals(other.shells_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReloadTime, other.ReloadTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DispersionAngle, other.DispersionAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShotDispersionFactor, other.ShotDispersionFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TurretRotationDispersionFactor, other.TurretRotationDispersionFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AimingTime, other.AimingTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GunTurnRate, other.GunTurnRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mass, other.Mass)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EnginePower, other.EnginePower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ForwardMaxSpeed, other.ForwardMaxSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BackwardMaxSpeed, other.BackwardMaxSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationSpeed, other.RotationSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TerrainResistanceHard, other.TerrainResistanceHard)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrakeForce, other.BrakeForce)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (HasSet) hash ^= Set.GetHashCode();
      if (HasClass) hash ^= Class.GetHashCode();
      if (HasFaction) hash ^= Faction.GetHashCode();
      if (turretRotatorHealth_ != null) hash ^= TurretRotatorHealth.GetHashCode();
      if (surveyingDeviceHealth_ != null) hash ^= SurveyingDeviceHealth.GetHashCode();
      if (gunHealth_ != null) hash ^= GunHealth.GetHashCode();
      if (chassisHealth_ != null) hash ^= ChassisHealth.GetHashCode();
      if (ammoBayHealth_ != null) hash ^= AmmoBayHealth.GetHashCode();
      if (engineHealth_ != null) hash ^= EngineHealth.GetHashCode();
      if (fuelTankHealth_ != null) hash ^= FuelTankHealth.GetHashCode();
      hash ^= crewHealth_.GetHashCode();
      if (HasMaxHealth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxHealth);
      if (HasHealthBurnPerSec) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HealthBurnPerSec);
      if (HasFireStartingChance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireStartingChance);
      if (HasConcealmentStationary) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConcealmentStationary);
      if (HasConcealmentMoving) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConcealmentMoving);
      if (HasConcealmentFactorAtShot) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConcealmentFactorAtShot);
      if (HasTurretTurnRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TurretTurnRate);
      if (HasCircularVisionRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CircularVisionRadius);
      hash ^= shells_.GetHashCode();
      if (HasReloadTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReloadTime);
      if (HasDispersionAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DispersionAngle);
      if (HasShotDispersionFactor) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShotDispersionFactor);
      if (HasTurretRotationDispersionFactor) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TurretRotationDispersionFactor);
      if (HasAimingTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AimingTime);
      if (HasGunTurnRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GunTurnRate);
      if (HasMass) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mass);
      if (HasEnginePower) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EnginePower);
      if (HasForwardMaxSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ForwardMaxSpeed);
      if (HasBackwardMaxSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BackwardMaxSpeed);
      if (HasRotationSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationSpeed);
      if (HasTerrainResistanceHard) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TerrainResistanceHard);
      if (HasBrakeForce) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrakeForce);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (name_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Name);
      }
      if (HasSet) {
        output.WriteRawTag(26);
        output.WriteString(Set);
      }
      if (HasClass) {
        output.WriteRawTag(34);
        output.WriteString(Class);
      }
      if (HasFaction) {
        output.WriteRawTag(42);
        output.WriteString(Faction);
      }
      if (turretRotatorHealth_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TurretRotatorHealth);
      }
      if (surveyingDeviceHealth_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SurveyingDeviceHealth);
      }
      if (gunHealth_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(GunHealth);
      }
      if (chassisHealth_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ChassisHealth);
      }
      if (ammoBayHealth_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AmmoBayHealth);
      }
      if (engineHealth_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EngineHealth);
      }
      if (fuelTankHealth_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FuelTankHealth);
      }
      crewHealth_.WriteTo(output, _repeated_crewHealth_codec);
      if (HasMaxHealth) {
        output.WriteRawTag(117);
        output.WriteFloat(MaxHealth);
      }
      if (HasHealthBurnPerSec) {
        output.WriteRawTag(125);
        output.WriteFloat(HealthBurnPerSec);
      }
      if (HasFireStartingChance) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(FireStartingChance);
      }
      if (HasConcealmentStationary) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(ConcealmentStationary);
      }
      if (HasConcealmentMoving) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(ConcealmentMoving);
      }
      if (HasConcealmentFactorAtShot) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(ConcealmentFactorAtShot);
      }
      if (HasTurretTurnRate) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(TurretTurnRate);
      }
      if (HasCircularVisionRadius) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(CircularVisionRadius);
      }
      shells_.WriteTo(output, _repeated_shells_codec);
      if (HasReloadTime) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(ReloadTime);
      }
      if (HasDispersionAngle) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(DispersionAngle);
      }
      if (HasShotDispersionFactor) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(ShotDispersionFactor);
      }
      if (HasTurretRotationDispersionFactor) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(TurretRotationDispersionFactor);
      }
      if (HasAimingTime) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(AimingTime);
      }
      if (HasGunTurnRate) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(GunTurnRate);
      }
      if (HasMass) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(Mass);
      }
      if (HasEnginePower) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(EnginePower);
      }
      if (HasForwardMaxSpeed) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(ForwardMaxSpeed);
      }
      if (HasBackwardMaxSpeed) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(BackwardMaxSpeed);
      }
      if (HasRotationSpeed) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(RotationSpeed);
      }
      if (HasTerrainResistanceHard) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(TerrainResistanceHard);
      }
      if (HasBrakeForce) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(BrakeForce);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (name_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Name);
      }
      if (HasSet) {
        output.WriteRawTag(26);
        output.WriteString(Set);
      }
      if (HasClass) {
        output.WriteRawTag(34);
        output.WriteString(Class);
      }
      if (HasFaction) {
        output.WriteRawTag(42);
        output.WriteString(Faction);
      }
      if (turretRotatorHealth_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TurretRotatorHealth);
      }
      if (surveyingDeviceHealth_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SurveyingDeviceHealth);
      }
      if (gunHealth_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(GunHealth);
      }
      if (chassisHealth_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ChassisHealth);
      }
      if (ammoBayHealth_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AmmoBayHealth);
      }
      if (engineHealth_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EngineHealth);
      }
      if (fuelTankHealth_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FuelTankHealth);
      }
      crewHealth_.WriteTo(ref output, _repeated_crewHealth_codec);
      if (HasMaxHealth) {
        output.WriteRawTag(117);
        output.WriteFloat(MaxHealth);
      }
      if (HasHealthBurnPerSec) {
        output.WriteRawTag(125);
        output.WriteFloat(HealthBurnPerSec);
      }
      if (HasFireStartingChance) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(FireStartingChance);
      }
      if (HasConcealmentStationary) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(ConcealmentStationary);
      }
      if (HasConcealmentMoving) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(ConcealmentMoving);
      }
      if (HasConcealmentFactorAtShot) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(ConcealmentFactorAtShot);
      }
      if (HasTurretTurnRate) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(TurretTurnRate);
      }
      if (HasCircularVisionRadius) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(CircularVisionRadius);
      }
      shells_.WriteTo(ref output, _repeated_shells_codec);
      if (HasReloadTime) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(ReloadTime);
      }
      if (HasDispersionAngle) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(DispersionAngle);
      }
      if (HasShotDispersionFactor) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(ShotDispersionFactor);
      }
      if (HasTurretRotationDispersionFactor) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(TurretRotationDispersionFactor);
      }
      if (HasAimingTime) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(AimingTime);
      }
      if (HasGunTurnRate) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(GunTurnRate);
      }
      if (HasMass) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(Mass);
      }
      if (HasEnginePower) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(EnginePower);
      }
      if (HasForwardMaxSpeed) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(ForwardMaxSpeed);
      }
      if (HasBackwardMaxSpeed) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(BackwardMaxSpeed);
      }
      if (HasRotationSpeed) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(RotationSpeed);
      }
      if (HasTerrainResistanceHard) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(TerrainResistanceHard);
      }
      if (HasBrakeForce) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(BrakeForce);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (HasSet) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Set);
      }
      if (HasClass) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Class);
      }
      if (HasFaction) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Faction);
      }
      if (turretRotatorHealth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TurretRotatorHealth);
      }
      if (surveyingDeviceHealth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SurveyingDeviceHealth);
      }
      if (gunHealth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GunHealth);
      }
      if (chassisHealth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChassisHealth);
      }
      if (ammoBayHealth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AmmoBayHealth);
      }
      if (engineHealth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EngineHealth);
      }
      if (fuelTankHealth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FuelTankHealth);
      }
      size += crewHealth_.CalculateSize(_repeated_crewHealth_codec);
      if (HasMaxHealth) {
        size += 1 + 4;
      }
      if (HasHealthBurnPerSec) {
        size += 1 + 4;
      }
      if (HasFireStartingChance) {
        size += 2 + 4;
      }
      if (HasConcealmentStationary) {
        size += 2 + 4;
      }
      if (HasConcealmentMoving) {
        size += 2 + 4;
      }
      if (HasConcealmentFactorAtShot) {
        size += 2 + 4;
      }
      if (HasTurretTurnRate) {
        size += 2 + 4;
      }
      if (HasCircularVisionRadius) {
        size += 2 + 4;
      }
      size += shells_.CalculateSize(_repeated_shells_codec);
      if (HasReloadTime) {
        size += 2 + 4;
      }
      if (HasDispersionAngle) {
        size += 2 + 4;
      }
      if (HasShotDispersionFactor) {
        size += 2 + 4;
      }
      if (HasTurretRotationDispersionFactor) {
        size += 2 + 4;
      }
      if (HasAimingTime) {
        size += 2 + 4;
      }
      if (HasGunTurnRate) {
        size += 2 + 4;
      }
      if (HasMass) {
        size += 2 + 4;
      }
      if (HasEnginePower) {
        size += 2 + 4;
      }
      if (HasForwardMaxSpeed) {
        size += 2 + 4;
      }
      if (HasBackwardMaxSpeed) {
        size += 2 + 4;
      }
      if (HasRotationSpeed) {
        size += 2 + 4;
      }
      if (HasTerrainResistanceHard) {
        size += 2 + 4;
      }
      if (HasBrakeForce) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Tank other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::Blitzkit.I18n();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.HasSet) {
        Set = other.Set;
      }
      if (other.HasClass) {
        Class = other.Class;
      }
      if (other.HasFaction) {
        Faction = other.Faction;
      }
      if (other.turretRotatorHealth_ != null) {
        if (turretRotatorHealth_ == null) {
          TurretRotatorHealth = new global::Blitzkit.ModuleHealth();
        }
        TurretRotatorHealth.MergeFrom(other.TurretRotatorHealth);
      }
      if (other.surveyingDeviceHealth_ != null) {
        if (surveyingDeviceHealth_ == null) {
          SurveyingDeviceHealth = new global::Blitzkit.ModuleHealth();
        }
        SurveyingDeviceHealth.MergeFrom(other.SurveyingDeviceHealth);
      }
      if (other.gunHealth_ != null) {
        if (gunHealth_ == null) {
          GunHealth = new global::Blitzkit.ModuleHealth();
        }
        GunHealth.MergeFrom(other.GunHealth);
      }
      if (other.chassisHealth_ != null) {
        if (chassisHealth_ == null) {
          ChassisHealth = new global::Blitzkit.ModuleHealth();
        }
        ChassisHealth.MergeFrom(other.ChassisHealth);
      }
      if (other.ammoBayHealth_ != null) {
        if (ammoBayHealth_ == null) {
          AmmoBayHealth = new global::Blitzkit.ModuleHealth();
        }
        AmmoBayHealth.MergeFrom(other.AmmoBayHealth);
      }
      if (other.engineHealth_ != null) {
        if (engineHealth_ == null) {
          EngineHealth = new global::Blitzkit.ModuleHealth();
        }
        EngineHealth.MergeFrom(other.EngineHealth);
      }
      if (other.fuelTankHealth_ != null) {
        if (fuelTankHealth_ == null) {
          FuelTankHealth = new global::Blitzkit.ModuleHealth();
        }
        FuelTankHealth.MergeFrom(other.FuelTankHealth);
      }
      crewHealth_.Add(other.crewHealth_);
      if (other.HasMaxHealth) {
        MaxHealth = other.MaxHealth;
      }
      if (other.HasHealthBurnPerSec) {
        HealthBurnPerSec = other.HealthBurnPerSec;
      }
      if (other.HasFireStartingChance) {
        FireStartingChance = other.FireStartingChance;
      }
      if (other.HasConcealmentStationary) {
        ConcealmentStationary = other.ConcealmentStationary;
      }
      if (other.HasConcealmentMoving) {
        ConcealmentMoving = other.ConcealmentMoving;
      }
      if (other.HasConcealmentFactorAtShot) {
        ConcealmentFactorAtShot = other.ConcealmentFactorAtShot;
      }
      if (other.HasTurretTurnRate) {
        TurretTurnRate = other.TurretTurnRate;
      }
      if (other.HasCircularVisionRadius) {
        CircularVisionRadius = other.CircularVisionRadius;
      }
      shells_.Add(other.shells_);
      if (other.HasReloadTime) {
        ReloadTime = other.ReloadTime;
      }
      if (other.HasDispersionAngle) {
        DispersionAngle = other.DispersionAngle;
      }
      if (other.HasShotDispersionFactor) {
        ShotDispersionFactor = other.ShotDispersionFactor;
      }
      if (other.HasTurretRotationDispersionFactor) {
        TurretRotationDispersionFactor = other.TurretRotationDispersionFactor;
      }
      if (other.HasAimingTime) {
        AimingTime = other.AimingTime;
      }
      if (other.HasGunTurnRate) {
        GunTurnRate = other.GunTurnRate;
      }
      if (other.HasMass) {
        Mass = other.Mass;
      }
      if (other.HasEnginePower) {
        EnginePower = other.EnginePower;
      }
      if (other.HasForwardMaxSpeed) {
        ForwardMaxSpeed = other.ForwardMaxSpeed;
      }
      if (other.HasBackwardMaxSpeed) {
        BackwardMaxSpeed = other.BackwardMaxSpeed;
      }
      if (other.HasRotationSpeed) {
        RotationSpeed = other.RotationSpeed;
      }
      if (other.HasTerrainResistanceHard) {
        TerrainResistanceHard = other.TerrainResistanceHard;
      }
      if (other.HasBrakeForce) {
        BrakeForce = other.BrakeForce;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (name_ == null) {
              Name = new global::Blitzkit.I18n();
            }
            input.ReadMessage(Name);
            break;
          }
          case 26: {
            Set = input.ReadString();
            break;
          }
          case 34: {
            Class = input.ReadString();
            break;
          }
          case 42: {
            Faction = input.ReadString();
            break;
          }
          case 50: {
            if (turretRotatorHealth_ == null) {
              TurretRotatorHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(TurretRotatorHealth);
            break;
          }
          case 58: {
            if (surveyingDeviceHealth_ == null) {
              SurveyingDeviceHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(SurveyingDeviceHealth);
            break;
          }
          case 66: {
            if (gunHealth_ == null) {
              GunHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(GunHealth);
            break;
          }
          case 74: {
            if (chassisHealth_ == null) {
              ChassisHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(ChassisHealth);
            break;
          }
          case 82: {
            if (ammoBayHealth_ == null) {
              AmmoBayHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(AmmoBayHealth);
            break;
          }
          case 90: {
            if (engineHealth_ == null) {
              EngineHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(EngineHealth);
            break;
          }
          case 98: {
            if (fuelTankHealth_ == null) {
              FuelTankHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(FuelTankHealth);
            break;
          }
          case 106: {
            crewHealth_.AddEntriesFrom(input, _repeated_crewHealth_codec);
            break;
          }
          case 117: {
            MaxHealth = input.ReadFloat();
            break;
          }
          case 125: {
            HealthBurnPerSec = input.ReadFloat();
            break;
          }
          case 133: {
            FireStartingChance = input.ReadFloat();
            break;
          }
          case 141: {
            ConcealmentStationary = input.ReadFloat();
            break;
          }
          case 149: {
            ConcealmentMoving = input.ReadFloat();
            break;
          }
          case 157: {
            ConcealmentFactorAtShot = input.ReadFloat();
            break;
          }
          case 165: {
            TurretTurnRate = input.ReadFloat();
            break;
          }
          case 173: {
            CircularVisionRadius = input.ReadFloat();
            break;
          }
          case 178: {
            shells_.AddEntriesFrom(input, _repeated_shells_codec);
            break;
          }
          case 189: {
            ReloadTime = input.ReadFloat();
            break;
          }
          case 197: {
            DispersionAngle = input.ReadFloat();
            break;
          }
          case 205: {
            ShotDispersionFactor = input.ReadFloat();
            break;
          }
          case 213: {
            TurretRotationDispersionFactor = input.ReadFloat();
            break;
          }
          case 221: {
            AimingTime = input.ReadFloat();
            break;
          }
          case 229: {
            GunTurnRate = input.ReadFloat();
            break;
          }
          case 237: {
            Mass = input.ReadFloat();
            break;
          }
          case 245: {
            EnginePower = input.ReadFloat();
            break;
          }
          case 253: {
            ForwardMaxSpeed = input.ReadFloat();
            break;
          }
          case 261: {
            BackwardMaxSpeed = input.ReadFloat();
            break;
          }
          case 269: {
            RotationSpeed = input.ReadFloat();
            break;
          }
          case 277: {
            TerrainResistanceHard = input.ReadFloat();
            break;
          }
          case 285: {
            BrakeForce = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (name_ == null) {
              Name = new global::Blitzkit.I18n();
            }
            input.ReadMessage(Name);
            break;
          }
          case 26: {
            Set = input.ReadString();
            break;
          }
          case 34: {
            Class = input.ReadString();
            break;
          }
          case 42: {
            Faction = input.ReadString();
            break;
          }
          case 50: {
            if (turretRotatorHealth_ == null) {
              TurretRotatorHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(TurretRotatorHealth);
            break;
          }
          case 58: {
            if (surveyingDeviceHealth_ == null) {
              SurveyingDeviceHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(SurveyingDeviceHealth);
            break;
          }
          case 66: {
            if (gunHealth_ == null) {
              GunHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(GunHealth);
            break;
          }
          case 74: {
            if (chassisHealth_ == null) {
              ChassisHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(ChassisHealth);
            break;
          }
          case 82: {
            if (ammoBayHealth_ == null) {
              AmmoBayHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(AmmoBayHealth);
            break;
          }
          case 90: {
            if (engineHealth_ == null) {
              EngineHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(EngineHealth);
            break;
          }
          case 98: {
            if (fuelTankHealth_ == null) {
              FuelTankHealth = new global::Blitzkit.ModuleHealth();
            }
            input.ReadMessage(FuelTankHealth);
            break;
          }
          case 106: {
            crewHealth_.AddEntriesFrom(ref input, _repeated_crewHealth_codec);
            break;
          }
          case 117: {
            MaxHealth = input.ReadFloat();
            break;
          }
          case 125: {
            HealthBurnPerSec = input.ReadFloat();
            break;
          }
          case 133: {
            FireStartingChance = input.ReadFloat();
            break;
          }
          case 141: {
            ConcealmentStationary = input.ReadFloat();
            break;
          }
          case 149: {
            ConcealmentMoving = input.ReadFloat();
            break;
          }
          case 157: {
            ConcealmentFactorAtShot = input.ReadFloat();
            break;
          }
          case 165: {
            TurretTurnRate = input.ReadFloat();
            break;
          }
          case 173: {
            CircularVisionRadius = input.ReadFloat();
            break;
          }
          case 178: {
            shells_.AddEntriesFrom(ref input, _repeated_shells_codec);
            break;
          }
          case 189: {
            ReloadTime = input.ReadFloat();
            break;
          }
          case 197: {
            DispersionAngle = input.ReadFloat();
            break;
          }
          case 205: {
            ShotDispersionFactor = input.ReadFloat();
            break;
          }
          case 213: {
            TurretRotationDispersionFactor = input.ReadFloat();
            break;
          }
          case 221: {
            AimingTime = input.ReadFloat();
            break;
          }
          case 229: {
            GunTurnRate = input.ReadFloat();
            break;
          }
          case 237: {
            Mass = input.ReadFloat();
            break;
          }
          case 245: {
            EnginePower = input.ReadFloat();
            break;
          }
          case 253: {
            ForwardMaxSpeed = input.ReadFloat();
            break;
          }
          case 261: {
            BackwardMaxSpeed = input.ReadFloat();
            break;
          }
          case 269: {
            RotationSpeed = input.ReadFloat();
            break;
          }
          case 277: {
            TerrainResistanceHard = input.ReadFloat();
            break;
          }
          case 285: {
            BrakeForce = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CrewHealth : pb::IMessage<CrewHealth>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CrewHealth> _parser = new pb::MessageParser<CrewHealth>(() => new CrewHealth());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CrewHealth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blitzkit.TankReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CrewHealth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CrewHealth(CrewHealth other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      maxHealth_ = other.maxHealth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CrewHealth Clone() {
      return new CrewHealth(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::Blitzkit.CrewType TypeDefaultValue = global::Blitzkit.CrewType.Commander;

    private global::Blitzkit.CrewType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blitzkit.CrewType Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_health" field.</summary>
    public const int MaxHealthFieldNumber = 2;
    private readonly static float MaxHealthDefaultValue = 0F;

    private float maxHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxHealth {
      get { if ((_hasBits0 & 2) != 0) { return maxHealth_; } else { return MaxHealthDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxHealth_ = value;
      }
    }
    /// <summary>Gets whether the "max_health" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxHealth {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_health" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxHealth() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CrewHealth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CrewHealth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxHealth, other.MaxHealth)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasMaxHealth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxHealth);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasMaxHealth) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxHealth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasMaxHealth) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxHealth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasMaxHealth) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CrewHealth other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasMaxHealth) {
        MaxHealth = other.MaxHealth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Blitzkit.CrewType) input.ReadEnum();
            break;
          }
          case 21: {
            MaxHealth = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Blitzkit.CrewType) input.ReadEnum();
            break;
          }
          case 21: {
            MaxHealth = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Shell : pb::IMessage<Shell>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Shell> _parser = new pb::MessageParser<Shell>(() => new Shell());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Shell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blitzkit.TankReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Shell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Shell(Shell other) : this() {
      _hasBits0 = other._hasBits0;
      speed_ = other.speed_;
      gravity_ = other.gravity_;
      armorDamage_ = other.armorDamage_;
      moduleDamage_ = other.moduleDamage_;
      caliber_ = other.caliber_;
      piercingPower_ = other.piercingPower_;
      piercingPower500M_ = other.piercingPower500M_;
      normalization_ = other.normalization_;
      maxDistance_ = other.maxDistance_;
      ricochetAngle_ = other.ricochetAngle_;
      piercingPowerLossFactorByDistance_ = other.piercingPowerLossFactorByDistance_;
      explosionRadius_ = other.explosionRadius_;
      maxCount_ = other.maxCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Shell Clone() {
      return new Shell(this);
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 1;
    private readonly static float SpeedDefaultValue = 0F;

    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Speed {
      get { if ((_hasBits0 & 1) != 0) { return speed_; } else { return SpeedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        speed_ = value;
      }
    }
    /// <summary>Gets whether the "speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpeed {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpeed() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "gravity" field.</summary>
    public const int GravityFieldNumber = 2;
    private readonly static float GravityDefaultValue = 0F;

    private float gravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Gravity {
      get { if ((_hasBits0 & 2) != 0) { return gravity_; } else { return GravityDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gravity_ = value;
      }
    }
    /// <summary>Gets whether the "gravity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGravity {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "gravity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGravity() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "armor_damage" field.</summary>
    public const int ArmorDamageFieldNumber = 3;
    private readonly static float ArmorDamageDefaultValue = 0F;

    private float armorDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ArmorDamage {
      get { if ((_hasBits0 & 4) != 0) { return armorDamage_; } else { return ArmorDamageDefaultValue; } }
      set {
        _hasBits0 |= 4;
        armorDamage_ = value;
      }
    }
    /// <summary>Gets whether the "armor_damage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasArmorDamage {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "armor_damage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearArmorDamage() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "module_damage" field.</summary>
    public const int ModuleDamageFieldNumber = 4;
    private readonly static float ModuleDamageDefaultValue = 0F;

    private float moduleDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ModuleDamage {
      get { if ((_hasBits0 & 8) != 0) { return moduleDamage_; } else { return ModuleDamageDefaultValue; } }
      set {
        _hasBits0 |= 8;
        moduleDamage_ = value;
      }
    }
    /// <summary>Gets whether the "module_damage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModuleDamage {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "module_damage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModuleDamage() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "caliber" field.</summary>
    public const int CaliberFieldNumber = 5;
    private readonly static float CaliberDefaultValue = 0F;

    private float caliber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Caliber {
      get { if ((_hasBits0 & 16) != 0) { return caliber_; } else { return CaliberDefaultValue; } }
      set {
        _hasBits0 |= 16;
        caliber_ = value;
      }
    }
    /// <summary>Gets whether the "caliber" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCaliber {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "caliber" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCaliber() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "piercing_power" field.</summary>
    public const int PiercingPowerFieldNumber = 6;
    private readonly static float PiercingPowerDefaultValue = 0F;

    private float piercingPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PiercingPower {
      get { if ((_hasBits0 & 32) != 0) { return piercingPower_; } else { return PiercingPowerDefaultValue; } }
      set {
        _hasBits0 |= 32;
        piercingPower_ = value;
      }
    }
    /// <summary>Gets whether the "piercing_power" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPiercingPower {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "piercing_power" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPiercingPower() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "piercing_power_500m" field.</summary>
    public const int PiercingPower500MFieldNumber = 7;
    private readonly static float PiercingPower500MDefaultValue = 0F;

    private float piercingPower500M_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PiercingPower500M {
      get { if ((_hasBits0 & 64) != 0) { return piercingPower500M_; } else { return PiercingPower500MDefaultValue; } }
      set {
        _hasBits0 |= 64;
        piercingPower500M_ = value;
      }
    }
    /// <summary>Gets whether the "piercing_power_500m" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPiercingPower500M {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "piercing_power_500m" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPiercingPower500M() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "normalization" field.</summary>
    public const int NormalizationFieldNumber = 8;
    private readonly static float NormalizationDefaultValue = 0F;

    private float normalization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Normalization {
      get { if ((_hasBits0 & 128) != 0) { return normalization_; } else { return NormalizationDefaultValue; } }
      set {
        _hasBits0 |= 128;
        normalization_ = value;
      }
    }
    /// <summary>Gets whether the "normalization" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNormalization {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "normalization" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNormalization() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "max_distance" field.</summary>
    public const int MaxDistanceFieldNumber = 9;
    private readonly static float MaxDistanceDefaultValue = 0F;

    private float maxDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDistance {
      get { if ((_hasBits0 & 256) != 0) { return maxDistance_; } else { return MaxDistanceDefaultValue; } }
      set {
        _hasBits0 |= 256;
        maxDistance_ = value;
      }
    }
    /// <summary>Gets whether the "max_distance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxDistance {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "max_distance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxDistance() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "ricochet_angle" field.</summary>
    public const int RicochetAngleFieldNumber = 10;
    private readonly static float RicochetAngleDefaultValue = 0F;

    private float ricochetAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RicochetAngle {
      get { if ((_hasBits0 & 512) != 0) { return ricochetAngle_; } else { return RicochetAngleDefaultValue; } }
      set {
        _hasBits0 |= 512;
        ricochetAngle_ = value;
      }
    }
    /// <summary>Gets whether the "ricochet_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRicochetAngle {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "ricochet_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRicochetAngle() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "piercing_power_loss_factor_by_distance" field.</summary>
    public const int PiercingPowerLossFactorByDistanceFieldNumber = 11;
    private readonly static float PiercingPowerLossFactorByDistanceDefaultValue = 0F;

    private float piercingPowerLossFactorByDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PiercingPowerLossFactorByDistance {
      get { if ((_hasBits0 & 1024) != 0) { return piercingPowerLossFactorByDistance_; } else { return PiercingPowerLossFactorByDistanceDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        piercingPowerLossFactorByDistance_ = value;
      }
    }
    /// <summary>Gets whether the "piercing_power_loss_factor_by_distance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPiercingPowerLossFactorByDistance {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "piercing_power_loss_factor_by_distance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPiercingPowerLossFactorByDistance() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "explosion_radius" field.</summary>
    public const int ExplosionRadiusFieldNumber = 12;
    private readonly static float ExplosionRadiusDefaultValue = 0F;

    private float explosionRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExplosionRadius {
      get { if ((_hasBits0 & 2048) != 0) { return explosionRadius_; } else { return ExplosionRadiusDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        explosionRadius_ = value;
      }
    }
    /// <summary>Gets whether the "explosion_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExplosionRadius {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "explosion_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExplosionRadius() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "max_count" field.</summary>
    public const int MaxCountFieldNumber = 13;
    private readonly static int MaxCountDefaultValue = 0;

    private int maxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxCount {
      get { if ((_hasBits0 & 4096) != 0) { return maxCount_; } else { return MaxCountDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        maxCount_ = value;
      }
    }
    /// <summary>Gets whether the "max_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxCount {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "max_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxCount() {
      _hasBits0 &= ~4096;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Shell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Shell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gravity, other.Gravity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArmorDamage, other.ArmorDamage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ModuleDamage, other.ModuleDamage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Caliber, other.Caliber)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PiercingPower, other.PiercingPower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PiercingPower500M, other.PiercingPower500M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Normalization, other.Normalization)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDistance, other.MaxDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RicochetAngle, other.RicochetAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PiercingPowerLossFactorByDistance, other.PiercingPowerLossFactorByDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExplosionRadius, other.ExplosionRadius)) return false;
      if (MaxCount != other.MaxCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (HasGravity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gravity);
      if (HasArmorDamage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArmorDamage);
      if (HasModuleDamage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ModuleDamage);
      if (HasCaliber) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Caliber);
      if (HasPiercingPower) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PiercingPower);
      if (HasPiercingPower500M) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PiercingPower500M);
      if (HasNormalization) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Normalization);
      if (HasMaxDistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDistance);
      if (HasRicochetAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RicochetAngle);
      if (HasPiercingPowerLossFactorByDistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PiercingPowerLossFactorByDistance);
      if (HasExplosionRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExplosionRadius);
      if (HasMaxCount) hash ^= MaxCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSpeed) {
        output.WriteRawTag(13);
        output.WriteFloat(Speed);
      }
      if (HasGravity) {
        output.WriteRawTag(21);
        output.WriteFloat(Gravity);
      }
      if (HasArmorDamage) {
        output.WriteRawTag(29);
        output.WriteFloat(ArmorDamage);
      }
      if (HasModuleDamage) {
        output.WriteRawTag(37);
        output.WriteFloat(ModuleDamage);
      }
      if (HasCaliber) {
        output.WriteRawTag(45);
        output.WriteFloat(Caliber);
      }
      if (HasPiercingPower) {
        output.WriteRawTag(53);
        output.WriteFloat(PiercingPower);
      }
      if (HasPiercingPower500M) {
        output.WriteRawTag(61);
        output.WriteFloat(PiercingPower500M);
      }
      if (HasNormalization) {
        output.WriteRawTag(69);
        output.WriteFloat(Normalization);
      }
      if (HasMaxDistance) {
        output.WriteRawTag(77);
        output.WriteFloat(MaxDistance);
      }
      if (HasRicochetAngle) {
        output.WriteRawTag(85);
        output.WriteFloat(RicochetAngle);
      }
      if (HasPiercingPowerLossFactorByDistance) {
        output.WriteRawTag(93);
        output.WriteFloat(PiercingPowerLossFactorByDistance);
      }
      if (HasExplosionRadius) {
        output.WriteRawTag(101);
        output.WriteFloat(ExplosionRadius);
      }
      if (HasMaxCount) {
        output.WriteRawTag(104);
        output.WriteInt32(MaxCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSpeed) {
        output.WriteRawTag(13);
        output.WriteFloat(Speed);
      }
      if (HasGravity) {
        output.WriteRawTag(21);
        output.WriteFloat(Gravity);
      }
      if (HasArmorDamage) {
        output.WriteRawTag(29);
        output.WriteFloat(ArmorDamage);
      }
      if (HasModuleDamage) {
        output.WriteRawTag(37);
        output.WriteFloat(ModuleDamage);
      }
      if (HasCaliber) {
        output.WriteRawTag(45);
        output.WriteFloat(Caliber);
      }
      if (HasPiercingPower) {
        output.WriteRawTag(53);
        output.WriteFloat(PiercingPower);
      }
      if (HasPiercingPower500M) {
        output.WriteRawTag(61);
        output.WriteFloat(PiercingPower500M);
      }
      if (HasNormalization) {
        output.WriteRawTag(69);
        output.WriteFloat(Normalization);
      }
      if (HasMaxDistance) {
        output.WriteRawTag(77);
        output.WriteFloat(MaxDistance);
      }
      if (HasRicochetAngle) {
        output.WriteRawTag(85);
        output.WriteFloat(RicochetAngle);
      }
      if (HasPiercingPowerLossFactorByDistance) {
        output.WriteRawTag(93);
        output.WriteFloat(PiercingPowerLossFactorByDistance);
      }
      if (HasExplosionRadius) {
        output.WriteRawTag(101);
        output.WriteFloat(ExplosionRadius);
      }
      if (HasMaxCount) {
        output.WriteRawTag(104);
        output.WriteInt32(MaxCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSpeed) {
        size += 1 + 4;
      }
      if (HasGravity) {
        size += 1 + 4;
      }
      if (HasArmorDamage) {
        size += 1 + 4;
      }
      if (HasModuleDamage) {
        size += 1 + 4;
      }
      if (HasCaliber) {
        size += 1 + 4;
      }
      if (HasPiercingPower) {
        size += 1 + 4;
      }
      if (HasPiercingPower500M) {
        size += 1 + 4;
      }
      if (HasNormalization) {
        size += 1 + 4;
      }
      if (HasMaxDistance) {
        size += 1 + 4;
      }
      if (HasRicochetAngle) {
        size += 1 + 4;
      }
      if (HasPiercingPowerLossFactorByDistance) {
        size += 1 + 4;
      }
      if (HasExplosionRadius) {
        size += 1 + 4;
      }
      if (HasMaxCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Shell other) {
      if (other == null) {
        return;
      }
      if (other.HasSpeed) {
        Speed = other.Speed;
      }
      if (other.HasGravity) {
        Gravity = other.Gravity;
      }
      if (other.HasArmorDamage) {
        ArmorDamage = other.ArmorDamage;
      }
      if (other.HasModuleDamage) {
        ModuleDamage = other.ModuleDamage;
      }
      if (other.HasCaliber) {
        Caliber = other.Caliber;
      }
      if (other.HasPiercingPower) {
        PiercingPower = other.PiercingPower;
      }
      if (other.HasPiercingPower500M) {
        PiercingPower500M = other.PiercingPower500M;
      }
      if (other.HasNormalization) {
        Normalization = other.Normalization;
      }
      if (other.HasMaxDistance) {
        MaxDistance = other.MaxDistance;
      }
      if (other.HasRicochetAngle) {
        RicochetAngle = other.RicochetAngle;
      }
      if (other.HasPiercingPowerLossFactorByDistance) {
        PiercingPowerLossFactorByDistance = other.PiercingPowerLossFactorByDistance;
      }
      if (other.HasExplosionRadius) {
        ExplosionRadius = other.ExplosionRadius;
      }
      if (other.HasMaxCount) {
        MaxCount = other.MaxCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Speed = input.ReadFloat();
            break;
          }
          case 21: {
            Gravity = input.ReadFloat();
            break;
          }
          case 29: {
            ArmorDamage = input.ReadFloat();
            break;
          }
          case 37: {
            ModuleDamage = input.ReadFloat();
            break;
          }
          case 45: {
            Caliber = input.ReadFloat();
            break;
          }
          case 53: {
            PiercingPower = input.ReadFloat();
            break;
          }
          case 61: {
            PiercingPower500M = input.ReadFloat();
            break;
          }
          case 69: {
            Normalization = input.ReadFloat();
            break;
          }
          case 77: {
            MaxDistance = input.ReadFloat();
            break;
          }
          case 85: {
            RicochetAngle = input.ReadFloat();
            break;
          }
          case 93: {
            PiercingPowerLossFactorByDistance = input.ReadFloat();
            break;
          }
          case 101: {
            ExplosionRadius = input.ReadFloat();
            break;
          }
          case 104: {
            MaxCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Speed = input.ReadFloat();
            break;
          }
          case 21: {
            Gravity = input.ReadFloat();
            break;
          }
          case 29: {
            ArmorDamage = input.ReadFloat();
            break;
          }
          case 37: {
            ModuleDamage = input.ReadFloat();
            break;
          }
          case 45: {
            Caliber = input.ReadFloat();
            break;
          }
          case 53: {
            PiercingPower = input.ReadFloat();
            break;
          }
          case 61: {
            PiercingPower500M = input.ReadFloat();
            break;
          }
          case 69: {
            Normalization = input.ReadFloat();
            break;
          }
          case 77: {
            MaxDistance = input.ReadFloat();
            break;
          }
          case 85: {
            RicochetAngle = input.ReadFloat();
            break;
          }
          case 93: {
            PiercingPowerLossFactorByDistance = input.ReadFloat();
            break;
          }
          case 101: {
            ExplosionRadius = input.ReadFloat();
            break;
          }
          case 104: {
            MaxCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ModuleHealth : pb::IMessage<ModuleHealth>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModuleHealth> _parser = new pb::MessageParser<ModuleHealth>(() => new ModuleHealth());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ModuleHealth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blitzkit.TankReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModuleHealth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModuleHealth(ModuleHealth other) : this() {
      _hasBits0 = other._hasBits0;
      maxHealth_ = other.maxHealth_;
      maxRegenHealth_ = other.maxRegenHealth_;
      hysteresisHealth_ = other.hysteresisHealth_;
      healthRegenPerSec_ = other.healthRegenPerSec_;
      healthBurnPerSec_ = other.healthBurnPerSec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModuleHealth Clone() {
      return new ModuleHealth(this);
    }

    /// <summary>Field number for the "max_health" field.</summary>
    public const int MaxHealthFieldNumber = 1;
    private readonly static float MaxHealthDefaultValue = 0F;

    private float maxHealth_;
    /// <summary>
    /// max health, assigned by default at the start of the battle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxHealth {
      get { if ((_hasBits0 & 1) != 0) { return maxHealth_; } else { return MaxHealthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maxHealth_ = value;
      }
    }
    /// <summary>Gets whether the "max_health" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxHealth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "max_health" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxHealth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_regen_health" field.</summary>
    public const int MaxRegenHealthFieldNumber = 2;
    private readonly static float MaxRegenHealthDefaultValue = 0F;

    private float maxRegenHealth_;
    /// <summary>
    /// max health reached as the module regenerates after breaking
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxRegenHealth {
      get { if ((_hasBits0 & 2) != 0) { return maxRegenHealth_; } else { return MaxRegenHealthDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxRegenHealth_ = value;
      }
    }
    /// <summary>Gets whether the "max_regen_health" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxRegenHealth {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_regen_health" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxRegenHealth() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hysteresis_health" field.</summary>
    public const int HysteresisHealthFieldNumber = 3;
    private readonly static float HysteresisHealthDefaultValue = 0F;

    private float hysteresisHealth_;
    /// <summary>
    /// the range from 0 to this where the module is "red" and doesn't function
    /// all the while healing; after surpassing this, the "yellow" phase is reached
    /// undefined for modules like ammo bays
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HysteresisHealth {
      get { if ((_hasBits0 & 4) != 0) { return hysteresisHealth_; } else { return HysteresisHealthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        hysteresisHealth_ = value;
      }
    }
    /// <summary>Gets whether the "hysteresis_health" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHysteresisHealth {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hysteresis_health" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHysteresisHealth() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "health_regen_per_sec" field.</summary>
    public const int HealthRegenPerSecFieldNumber = 4;
    private readonly static float HealthRegenPerSecDefaultValue = 0F;

    private float healthRegenPerSec_;
    /// <summary>
    /// the heal rate (per second); this won't apply if the health is at or above
    /// max_regen hence always leaving it in the "yellow" phase until repaired
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HealthRegenPerSec {
      get { if ((_hasBits0 & 8) != 0) { return healthRegenPerSec_; } else { return HealthRegenPerSecDefaultValue; } }
      set {
        _hasBits0 |= 8;
        healthRegenPerSec_ = value;
      }
    }
    /// <summary>Gets whether the "health_regen_per_sec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHealthRegenPerSec {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "health_regen_per_sec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHealthRegenPerSec() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "health_burn_per_sec" field.</summary>
    public const int HealthBurnPerSecFieldNumber = 5;
    private readonly static float HealthBurnPerSecDefaultValue = 0F;

    private float healthBurnPerSec_;
    /// <summary>
    /// damage received (per second) to the modules when caught on fire; this can
    /// be undefined for some modules like the gun or chassis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HealthBurnPerSec {
      get { if ((_hasBits0 & 16) != 0) { return healthBurnPerSec_; } else { return HealthBurnPerSecDefaultValue; } }
      set {
        _hasBits0 |= 16;
        healthBurnPerSec_ = value;
      }
    }
    /// <summary>Gets whether the "health_burn_per_sec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHealthBurnPerSec {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "health_burn_per_sec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHealthBurnPerSec() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ModuleHealth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ModuleHealth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxHealth, other.MaxHealth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxRegenHealth, other.MaxRegenHealth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HysteresisHealth, other.HysteresisHealth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HealthRegenPerSec, other.HealthRegenPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HealthBurnPerSec, other.HealthBurnPerSec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMaxHealth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxHealth);
      if (HasMaxRegenHealth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxRegenHealth);
      if (HasHysteresisHealth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HysteresisHealth);
      if (HasHealthRegenPerSec) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HealthRegenPerSec);
      if (HasHealthBurnPerSec) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HealthBurnPerSec);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMaxHealth) {
        output.WriteRawTag(13);
        output.WriteFloat(MaxHealth);
      }
      if (HasMaxRegenHealth) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxRegenHealth);
      }
      if (HasHysteresisHealth) {
        output.WriteRawTag(29);
        output.WriteFloat(HysteresisHealth);
      }
      if (HasHealthRegenPerSec) {
        output.WriteRawTag(37);
        output.WriteFloat(HealthRegenPerSec);
      }
      if (HasHealthBurnPerSec) {
        output.WriteRawTag(45);
        output.WriteFloat(HealthBurnPerSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMaxHealth) {
        output.WriteRawTag(13);
        output.WriteFloat(MaxHealth);
      }
      if (HasMaxRegenHealth) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxRegenHealth);
      }
      if (HasHysteresisHealth) {
        output.WriteRawTag(29);
        output.WriteFloat(HysteresisHealth);
      }
      if (HasHealthRegenPerSec) {
        output.WriteRawTag(37);
        output.WriteFloat(HealthRegenPerSec);
      }
      if (HasHealthBurnPerSec) {
        output.WriteRawTag(45);
        output.WriteFloat(HealthBurnPerSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMaxHealth) {
        size += 1 + 4;
      }
      if (HasMaxRegenHealth) {
        size += 1 + 4;
      }
      if (HasHysteresisHealth) {
        size += 1 + 4;
      }
      if (HasHealthRegenPerSec) {
        size += 1 + 4;
      }
      if (HasHealthBurnPerSec) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ModuleHealth other) {
      if (other == null) {
        return;
      }
      if (other.HasMaxHealth) {
        MaxHealth = other.MaxHealth;
      }
      if (other.HasMaxRegenHealth) {
        MaxRegenHealth = other.MaxRegenHealth;
      }
      if (other.HasHysteresisHealth) {
        HysteresisHealth = other.HysteresisHealth;
      }
      if (other.HasHealthRegenPerSec) {
        HealthRegenPerSec = other.HealthRegenPerSec;
      }
      if (other.HasHealthBurnPerSec) {
        HealthBurnPerSec = other.HealthBurnPerSec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            MaxHealth = input.ReadFloat();
            break;
          }
          case 21: {
            MaxRegenHealth = input.ReadFloat();
            break;
          }
          case 29: {
            HysteresisHealth = input.ReadFloat();
            break;
          }
          case 37: {
            HealthRegenPerSec = input.ReadFloat();
            break;
          }
          case 45: {
            HealthBurnPerSec = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            MaxHealth = input.ReadFloat();
            break;
          }
          case 21: {
            MaxRegenHealth = input.ReadFloat();
            break;
          }
          case 29: {
            HysteresisHealth = input.ReadFloat();
            break;
          }
          case 37: {
            HealthRegenPerSec = input.ReadFloat();
            break;
          }
          case 45: {
            HealthBurnPerSec = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
